import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as u,a as s,b as n,d as a,w as p,e}from"./app-6706a352.js";const r={},k=s("p",null,[n("👨‍🎓"),s("strong",null,"博主简介")],-1),d={href:"https://blog.csdn.net/liu_chen_yang?type=blog",target:"_blank",rel:"noopener noreferrer"},m=s("br",null,null,-1),b={href:"https://bbs.huaweicloud.com/community/myblog",target:"_blank",rel:"noopener noreferrer"},v=s("br",null,null,-1),g={href:"https://developer.aliyun.com/my?spm=a2c6h.13148508.setting.3.21fc4f0eCmz1v3#/article?_k=zooqoz",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),h=s("strong",null,"交流社区：",-1),w={href:"https://bbs.csdn.net/forums/lcy",target:"_blank",rel:"noopener noreferrer"},q=s("br",null,null,-1),f=s("br",null,null,-1),_=e(`<hr><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321049.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_1、前言" tabindex="-1"><a class="header-anchor" href="#_1、前言" aria-hidden="true">#</a> 1、前言</h2><blockquote><p>这里写代码的工具为：PyCharm 2022.3.3<br> Python 版本为：3.8.5<br> 工作平台：Windows</p></blockquote><h2 id="_2、表达式概述" tabindex="-1"><a class="header-anchor" href="#_2、表达式概述" aria-hidden="true">#</a> 2、表达式概述</h2><h3 id="_2-1-认识表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-认识表达式" aria-hidden="true">#</a> 2.1 认识表达式</h3><p>  表达式就是计算的式子，有计算符和操作数组成。表达式必须返回一个值。操作数是参与运算的对象，包括字面值、变量、对象、表达式等。<br>   Python的表达式是一组代码，它们可以被解释器解析为一个值、对象或操作。表达式可以包括变量、函数调用、运算符、常量等，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 交互式界面</span>
<span class="token string">&quot;python&quot;</span>                <span class="token comment"># 字符串表达式，输出结果为 python</span>
<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span>  				<span class="token comment"># 运算表达式，结果为 14</span>
<span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world!&quot;</span>  	<span class="token comment"># 字符串拼接表达式，结果为 &quot;Hello, world!&quot;</span>
x <span class="token operator">=</span> <span class="token number">42</span>  				<span class="token comment"># 赋值表达式，将值 42 赋给变量 x</span>
<span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>  			<span class="token comment"># 函数调用表达式，结果为 5</span>

<span class="token comment">#解析器</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">&quot;python&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 字符串表达式，输出结果为 python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token comment"># 运算表达式，结果为 14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 字符串拼接表达式，结果为 &quot;Hello, world!&quot;</span>
x <span class="token operator">=</span> <span class="token number">42</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment"># 赋值表达式，将值 42 赋给变量 x</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 函数调用表达式，结果为 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-定义表达式" tabindex="-1"><a class="header-anchor" href="#_2-2-定义表达式" aria-hidden="true">#</a> 2.2 定义表达式</h3><blockquote><p>简单的表达式：  一个值 一个变量<br> 复杂的表达式：  由简单的表达式组成复杂的表达式嵌套可以组成更复杂表达式<br> 表达式运算：  从内到外，依次逐级上移<br> 表达式运算顺序：  从左到右可以使用小括号改变表达式的运算顺序</p></blockquote><p>举个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>			<span class="token comment"># 结果= 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 结果= 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">&gt;</span>c <span class="token keyword">and</span> a<span class="token operator">-</span>b<span class="token operator">&lt;</span>c <span class="token keyword">or</span> a<span class="token operator">&gt;</span>b<span class="token operator">&gt;</span>c<span class="token punctuation">)</span>	<span class="token comment"># 这样看着比较乱，不好看出什么意思，这个就是未分组</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">&gt;</span>c<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token operator">&gt;</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 分组了，这样看着就比较清晰了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-认识运算符" tabindex="-1"><a class="header-anchor" href="#_2-3-认识运算符" aria-hidden="true">#</a> 2.3 认识运算符</h3><p>运算符表示特点给算法的符号，大部分由标点符号表示（+、-、=等等），少数运算符由单词组成（or、and、in、is、for）。运算符必须与操作数配合使用，组成表达式，才能发挥作用。根据操作数的数量，运算符可分为3中类型：</p><ul><li>一元运算符：有1个操作数，如：取反、逻辑非not、一元减号一。</li><li>二元运算符：有2个操作符，也是最常用的，需要两个操作符结合使用。</li><li>三元运算符：有3个操作符，一般用于条件表达式中。</li></ul><p>Python中的运算符有以下几种：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1.</span> 括号和小数点（最高优先级）
<span class="token number">2.</span> 幂运算符：<span class="token operator">**</span>
<span class="token number">3.</span> 正负号：<span class="token operator">+</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>x
<span class="token number">4.</span> 乘除模运算符：<span class="token operator">*</span>，<span class="token operator">/</span>，<span class="token operator">%</span>
<span class="token number">5.</span> 加减运算符：<span class="token operator">+</span>，<span class="token operator">-</span>
<span class="token number">6.</span> 位运算符：
   <span class="token operator">-</span> 按位取反：<span class="token operator">~</span>
   <span class="token operator">-</span> 位与：<span class="token operator">&amp;</span>
   <span class="token operator">-</span> 位或：<span class="token operator">|</span>
   <span class="token operator">-</span> 异或：<span class="token operator">^</span>
   <span class="token operator">-</span> 左移、右移运算符：<span class="token operator">&lt;&lt;</span><span class="token punctuation">,</span> <span class="token operator">&gt;&gt;</span> 
<span class="token number">7.</span> 比较运算符：<span class="token operator">==</span>，<span class="token operator">!=</span>，<span class="token operator">&gt;</span>，<span class="token operator">&lt;</span>，<span class="token operator">&gt;=</span>，<span class="token operator">&lt;=</span>
<span class="token number">8.</span> 逻辑运算符：
   <span class="token operator">-</span> 与：<span class="token keyword">and</span>
   <span class="token operator">-</span> 或：<span class="token keyword">or</span>
   <span class="token operator">-</span> 非：<span class="token keyword">not</span>
<span class="token number">9.</span> 赋值运算符：<span class="token operator">=</span>，<span class="token operator">+=</span>，<span class="token operator">-=</span>，<span class="token operator">*=</span>，<span class="token operator">/=</span>，<span class="token operator">%=</span>，<span class="token operator">**=</span>，<span class="token operator">//=</span> 
<span class="token number">10.</span> 身份运算符：
   <span class="token operator">-</span> <span class="token keyword">is</span>
   <span class="token operator">-</span> <span class="token keyword">is</span> <span class="token keyword">not</span>
<span class="token number">11.</span> 成员运算符：
   <span class="token operator">-</span> <span class="token keyword">in</span>
   <span class="token operator">-</span> <span class="token keyword">not</span> <span class="token keyword">in</span>
<span class="token number">12.</span> 最低优先级：逗号（<span class="token punctuation">,</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从高到低排序：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1.</span> 括号和小数点（最高优先级）
<span class="token number">2.</span> 幂运算符：<span class="token operator">**</span>
<span class="token number">3.</span> 正负号：<span class="token operator">+</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>x
<span class="token number">4.</span> 乘除模运算符：<span class="token operator">*</span>，<span class="token operator">/</span>，<span class="token operator">%</span>
<span class="token number">5.</span> 加减运算符：<span class="token operator">+</span>，<span class="token operator">-</span>
<span class="token number">6.</span> 位运算符： <span class="token operator">~</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">|</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">,</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">,</span> <span class="token operator">&gt;&gt;</span>
<span class="token number">7.</span> 比较运算符：<span class="token operator">==</span>，<span class="token operator">!=</span>，<span class="token operator">&gt;</span>，<span class="token operator">&lt;</span>，<span class="token operator">&gt;=</span>，<span class="token operator">&lt;=</span>
<span class="token number">8.</span> 逻辑运算符：<span class="token keyword">not</span>，<span class="token keyword">and</span>，<span class="token keyword">or</span>
<span class="token number">9.</span> 赋值运算符：<span class="token operator">=</span>，<span class="token operator">+=</span>，<span class="token operator">-=</span>，<span class="token operator">*=</span>，<span class="token operator">/=</span>，<span class="token operator">%=</span>，<span class="token operator">**=</span>，<span class="token operator">//=</span>
<span class="token number">10.</span> 身份运算符：<span class="token keyword">is</span>，<span class="token keyword">is</span> <span class="token keyword">not</span>
<span class="token number">11.</span> 成员运算符：<span class="token keyword">in</span>，<span class="token keyword">not</span> <span class="token keyword">in</span>
<span class="token number">12.</span> 最低优先级：逗号（<span class="token punctuation">,</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：（常用的数学上的运算）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># + 与 * 的数字计算</span>
<span class="token number">4</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">5</span>
先算<span class="token number">4</span><span class="token operator">*</span><span class="token number">5</span>，因为<span class="token operator">*</span>号的优先级比<span class="token operator">+</span>号高，所以先算乘号；
再算<span class="token number">4</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">20</span> <span class="token operator">=</span> <span class="token number">24</span>，所以结果是<span class="token number">24</span>。

<span class="token comment"># / 与 * 的数字计算</span>
<span class="token number">100</span><span class="token operator">/</span><span class="token number">25</span><span class="token operator">*</span><span class="token number">6</span>
这里<span class="token operator">/</span>和<span class="token operator">*</span>是相等的优先级，所以从左到右以此计算：<span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">/</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">6</span> <span class="token operator">=</span> <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-条件表达式" tabindex="-1"><a class="header-anchor" href="#_2-4-条件表达式" aria-hidden="true">#</a> 2.4 条件表达式</h3><p>条件表达式就是属于判断表达式；<br> 条件语句无法参与表达式运算，如果在表达式中应用条件检测，可以选择条件表达式。<br> 条件表达式是python唯一的三元运算符，语法格式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&lt;</span><span class="token boolean">True</span>表达式<span class="token operator">&gt;</span> <span class="token keyword">if</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">&gt;</span> <span class="token keyword">else</span> <span class="token operator">&lt;</span><span class="token boolean">False</span>表达式<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果条件表达式为True，则执行True表达式，否则执行False表达式。</p><p>【示例1】将变量n的绝对值赋值给变量x</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> n <span class="token keyword">if</span> n<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>n
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：<br> 其中x = n if n &gt;= 0 else -n 表达式等效于下面的条件语句：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> n<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">:</span>
	x <span class="token operator">=</span> n
<span class="token keyword">else</span><span class="token punctuation">:</span>
	x <span class="token operator">=</span> <span class="token operator">-</span>n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：可以使用列表结构来模拟条件表达式，语法格式如下：<br> [False 表达式,Tre 表达式条件表达式]<br> 针对示例1中的<code>x = n if n &gt;=0 else -n</code> 一行代码，使用二维列表来表示，代码如下。<br> x=[-n,n][n&gt;=0]<br> 如果n&gt;=0成立，返回True,转换为数宇1，则从列表中读取第二个元素;如果n&gt;=0不成立，返回 False,转换为数宇0，则从列表中读取第一个元素。</p></blockquote><p>【示例2】提示输入用户名和密码，如果用户名和密码都输入正确，则提示 “欢迎登录！”，如果用户名或密码输入错误，则提示 “用户名或密码输入错误！”，假定用户名为 test，密码为 123456。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>username <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入用户名：&quot;</span><span class="token punctuation">)</span>
userpaswd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码：&quot;</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> <span class="token string">&quot;欢迎登陆！&quot;</span><span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">&quot;test&quot;</span> <span class="token keyword">and</span> userpaswd <span class="token operator">==</span> <span class="token string">&quot;123456&quot;</span> <span class="token keyword">else</span> <span class="token string">&quot;用户名或密码输入错误！&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可视化解析:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#首先用户可以输入用户名和密码</span>
username <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入用户名：&quot;</span><span class="token punctuation">)</span>
userpaswd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码：&quot;</span><span class="token punctuation">)</span>

<span class="token comment">#if判断，如果username==&quot;test&quot;并且userpasswd==&quot;123456&quot;的话就输出“欢迎登录！”；否则输出“用户名或密码输入错误！”并输出。</span>
<span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">&quot;test&quot;</span> <span class="token keyword">and</span> userpaswd <span class="token operator">==</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token string">&quot;欢迎登陆！&quot;</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token string">&quot;用户名或密码输入错误！&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、算术运算" tabindex="-1"><a class="header-anchor" href="#_3、算术运算" aria-hidden="true">#</a> 3、算术运算</h2><blockquote><p>算数运算包括：加（+）、减（-）、乘（*）、除（/）、求余（%）、求整（//）、求幂（**）</p></blockquote><ul><li>图解：</li></ul><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321787.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>【示例1】随机抽取4个1~10之间的数字，编写表达式，使用算术运算让它们总是等于24。注意，每个数字必须使用，且只能使用一次。示例代码如下:</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>          <span class="token comment"># 1+4=5 5*4=20 20+4=24</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># 5*3=15 15-9=6 4*6=24</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 3+10=13 2*13=26 26-2=24</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span>      <span class="token comment"># 5*6=30 30+1=31 31-7=24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>【示例 2】设计一个表达式，求一个数字连续运算2 次，运算结果总等于 6，如 2+2+2=6。如果这个数字为(1)~(9)时，请编写表达式，确保每个表达式的值都为6。</li></ul><p>(1)当数字为2时，则表达式为:2+2+2。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(2)当数字为3时，则表达式为:3*3-3。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(3)当数字为5时，则表达式为: 5/5+5。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(4)当数字为6时，则表达式为:6-6+6。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(5)当数字为7时，则表达式为:7-7/7。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(6)当数字为4时，则表达式为: 根号4+根号4+根号4</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(7)当数字为8时，则表达式为: 3根号8+3根号8+3根号8</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（8）当数字为9时，则表达式为：根号9*根号9-根号9</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">9</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（9） 当数字为1时，可以使用阶乘，则表达式为：(1+1+1)!，3!=3<em>2</em>1</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math					    <span class="token comment">#导入数学运算模块</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">#调用阶乘函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用递归两数定义一个求阶乘函数，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                           <span class="token comment"># 阶乘函数</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                              <span class="token comment"># 设置终止递归的条件</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span>       <span class="token comment"># 递归求积</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>【示例 3】计算 100 以内所有偶数和。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>                     <span class="token comment"># 临时汇总变量</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 迭代100以内的所有数字</span>
    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token comment"># 如果与2相除=0，则为偶数</span>
        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> i       <span class="token comment"># 叠加偶数和</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span>                  <span class="token comment"># 输出为：2550</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、赋值运算" tabindex="-1"><a class="header-anchor" href="#_4、赋值运算" aria-hidden="true">#</a> 4、赋值运算</h2><ul><li>图解：</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>c = 10 # 变量c的值为10</td></tr><tr><td>+=</td><td>先相加，后赋值</td><td>c += a # 等效于c = c+a</td></tr><tr><td>-=</td><td>先相减，后赋值</td><td>c -= a # 等效于c = c-a</td></tr><tr><td>*=</td><td>先相乘，后赋值</td><td>c *=a # 等效于c = c*a</td></tr><tr><td>/=</td><td>先相除，后赋值</td><td>c /=a # 等效于c = c/a</td></tr><tr><td>%=</td><td>先取模，后赋值</td><td>c %=a # 等效于c = c%a</td></tr><tr><td>**=</td><td>先求幂，后赋值</td><td>c **=a # 等效于c = c**a</td></tr><tr><td>//=</td><td>先整除，后赋值</td><td>c //=a # 等效于c = c//a</td></tr></tbody></table><ul><li>【示例1】要求用户输入字符，然后计算有多少个数字和字母</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>content<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入字符：&quot;</span><span class="token punctuation">)</span>         <span class="token comment"># 交互式输入，输入要写的内容</span>
num <span class="token operator">=</span> <span class="token number">0</span>                             <span class="token comment"># 定义变量num，统计数字的个数</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token number">0</span>                             <span class="token comment"># 定义变量str，统计字符的个数</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> content<span class="token punctuation">:</span>                   <span class="token comment"># 循环遍历字符串</span>
    <span class="token keyword">if</span> n<span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">:</span>         <span class="token comment"># 如果是数字，isdecimal：用于检查字符串是否只包含十进制数字</span>
        num<span class="token operator">+=</span><span class="token number">1</span>                      <span class="token comment"># 那么就加累计加数字个数</span>
    <span class="token keyword">elif</span> n<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">:</span>         <span class="token comment"># 如果是字符，isalpha：用于检查字符串是否只包含字母</span>
        <span class="token builtin">str</span><span class="token operator">+=</span><span class="token number">1</span>                      <span class="token comment"># 那么就累计加字符个数</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>                           <span class="token comment"># 否则</span>
        <span class="token keyword">pass</span>                        <span class="token comment"># 空语句，不做任何事情（主打的是一个占位）</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数字个数：&quot;</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>               <span class="token comment"># 输出数字的个数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;字符个数：&quot;</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>               <span class="token comment"># 输出字符的个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321213.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5、关系运算" tabindex="-1"><a class="header-anchor" href="#_5、关系运算" aria-hidden="true">#</a> 5、关系运算</h2><h3 id="_5-1-大小关系" tabindex="-1"><a class="header-anchor" href="#_5-1-大小关系" aria-hidden="true">#</a> 5.1 大小关系</h3><p>  大小关系包含四个运算符，用于比较两个相同类型的操作数。所有比较运算符返回1表示True，返回0表示False。<br>   操作数可以是字符串或数字，如果是数字，则直接比较大小，如果是字符串，则根据每个字符编码的大小，从左到右按顺序逐个比较。字符比较区分大小写，一般小写字符大于大写字符，如果不区分大小写，可以使用upper()或lower()方法统一字符串的大小写形式，如果操作时是布尔值，则先转化为数字，True为1，False为0，再进行比较。</p><ul><li>图解：</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>(10&gt;20) # 返回False</td></tr><tr><td>&lt;</td><td>小于</td><td>(10&lt;20) # 返回True</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>(10&gt;=20) # 返回False</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>(10&lt;=20) # 返回True</td></tr></tbody></table><ul><li>【示例1】要求输入字符串，将小写字符转换为大写字符，将大写字符转换为小写字符。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入字符：&quot;</span><span class="token punctuation">)</span>       <span class="token comment"># 接收一个字符串</span>
str1<span class="token operator">=</span><span class="token string">&quot;&quot;</span>                         <span class="token comment"># 定义一个空字符串,用于存储转换后的结果</span>
<span class="token keyword">for</span> cha <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>                 <span class="token comment"># 循环遍历字符串</span>
    <span class="token keyword">if</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">&lt;=</span> cha <span class="token operator">&lt;=</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">:</span>       <span class="token comment"># 判断字符是否是小写,如果是</span>
        cha1 <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span>      <span class="token comment"># 那么就将字符转为ASCII值,该值减去32变为大写</span>
    <span class="token keyword">elif</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">&lt;=</span> cha <span class="token operator">&lt;=</span> <span class="token string">&quot;Z&quot;</span><span class="token punctuation">:</span>     <span class="token comment"># 判断字符是否是大写,如果是</span>
        cha1 <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>cha<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">32</span>      <span class="token comment"># 那么就转换为小写字符对应的ASCII值</span>
    str1 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>cha1<span class="token punctuation">)</span>           <span class="token comment"># 将ASCII值转为字符型</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>                     <span class="token comment"># 打印转换后的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321342.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">swap_case</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment"># 定义一个函数swap_case(s),这个函数接受一个字符串s作为输入.</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment"># 然后调用python的swapcase方法,将大写转换为小写,小写转换为大写;   swapcase:用于将字符串中的所有大写字母转换为小写，并将所有小写字母转换为大写。</span>

input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串：&quot;</span><span class="token punctuation">)</span>      <span class="token comment"># 定义一个变量,让用户输入字符串;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>swap_case<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment"># 最后，我们调用我们定义的swap_case()函数，并将用户输入的字符串作为参数传递给它。然后，我们打印出swap_case()函数返回的字符串，这就是转换了大小写的字符串。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321940.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>【示例2】要求用户输入3个字符串，并比较3个字符串的大小。2个字符串进行大小比较时，时按照从左到右的顺序，依次比较相应位置的字符的ASCII码值的大小。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第一个字符串：&quot;</span><span class="token punctuation">)</span>              <span class="token comment"># 接收输入的字符串</span>
str2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第二个字符串：&quot;</span><span class="token punctuation">)</span>
str3 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第三个字符串：&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前面输入的三个字符串（从左到右）：&#39;</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">)</span>       <span class="token comment"># 打印排序前的字符串顺序</span>
<span class="token keyword">if</span> str1 <span class="token operator">&gt;</span> str2<span class="token punctuation">:</span>                     <span class="token comment"># 判断两个字符的大小</span>
    str1<span class="token punctuation">,</span>str2 <span class="token operator">=</span> str2<span class="token punctuation">,</span>str1           <span class="token comment"># 交换两个字符串（后面会学到）下面都是一样的</span>
<span class="token keyword">if</span> str1 <span class="token operator">&gt;</span> str3<span class="token punctuation">:</span>
    str1<span class="token punctuation">,</span>str3 <span class="token operator">=</span> str3<span class="token punctuation">,</span>str1
<span class="token keyword">if</span> str2 <span class="token operator">&gt;</span> str3<span class="token punctuation">:</span>
    str2<span class="token punctuation">,</span>str3 <span class="token operator">=</span> str3<span class="token punctuation">,</span>str1

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序后的字符串：&quot;</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">)</span>                      <span class="token comment"># 打印排序后的字符串顺序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321036.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-2-相等关系" tabindex="-1"><a class="header-anchor" href="#_5-2-相等关系" aria-hidden="true">#</a> 5.2 相等关系</h3><p>相等关系包含两个运算符</p><ul><li>图解：</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>==</td><td>比较两个对象是否相等</td><td>1 == 1 # 返回True</td></tr><tr><td>!=</td><td>比较两个对象是否不相等</td><td>1 != 1 # 返回False</td></tr></tbody></table><p>  相等关系的两个操作数没有类型限制。如果类型不同，则不相等，直接返回 False：如果类型相同，比较值是否相同，如果相同，则返回 True，否则返回 False。如果操作数是布尔值，则先转换为数字，为1，False 为0，再进行比较。</p><ul><li>【示例】假设有一筐鸡蛋，准备取出，如果：1个1个拿，正好拿完；2个2个拿，还剩1个；3个拿，正好拿完；4个4个拿，还剩1个；5个5个拿，还剩1个；6个6个拿，还剩3个；7个7个 正好拿完；8个8个拿，还剩1个；9个9个拿，正好拿完。问框里最少有多少个鸡蛋。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># 假设现在有最多1000个鸡蛋，循环去取i</span>
    <span class="token comment"># 判断，一个一个拿，刚好拿完，那么就是i %(余) 1 = 0；后面以此类推；and在这里是并且（与）的意思，意思就是要满足这些所有条件，才可以输出值；</span>
    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> i <span class="token operator">%</span> <span class="token number">9</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment"># 最后输出i，就是框里最少有多少个鸡蛋了；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321803.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_6、逻辑运算" tabindex="-1"><a class="header-anchor" href="#_6、逻辑运算" aria-hidden="true">#</a> 6、逻辑运算</h2><blockquote><p>逻辑运算符包括：逻辑与（and）、逻辑或（or）、逻辑非（not）</p></blockquote><p>短路逻辑是什么？<br>   短路逻辑是指在逻辑与或运算中，当已经可以确定整个表达式的值时，后续的运算将不再执行。<br>   在逻辑与（and）运算中，如果第一个操作数为假，那么无论第二个操作数是真还是假，整个表达式的值都为假（False），因此第二个操作数将不会被执行。<br>   同样，在逻辑或（or）运算中，如果第一个操作数为真，那么无论第二个操作数是真还是假，整个表达式的值都为真（True），因此第二个操作数将不会被执行。<br>   这种短路特性可以节省计算资源，并且在实际的编程中经常被用来优化代码。</p><h3 id="_6-1-逻辑与-运算" tabindex="-1"><a class="header-anchor" href="#_6-1-逻辑与-运算" aria-hidden="true">#</a> 6.1 逻辑与 运算</h3><blockquote><p>and 表示只有两个操作数都为True时，才返回True；否则都返回False。</p></blockquote><ul><li>图解：</li></ul><table><thead><tr><th>第一个操作数</th><th>第二个操作数</th><th>运算结果</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>False</td></tr><tr><td>False</td><td>True</td><td>False</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table><p>  逻辑与是一种短路逻辑，如果左侧表达式为 False，则直接短路返回结果，不再运算右侧表达式。 因此，在设计逻辑运算时，应确保逻辑运算符左侧的表达式返回值足一个可以预测的值。右侧表达式不应包含有效运算，如函数调用等，因为当左侧表达式为 False 时，则直接跳过右侧表达式，给正常运算带来不确定性。<br> 总的来说，只有左侧是False，那么返回一定是False。</p><ul><li>【示例】设计用户管理模块，对用户身份进行判断；<br> 1级为“游客”；<br> 2级为“会员：普通会员”；<br> 3级为“会员：高级会员”；<br> 4级为“会员：超级会员”；<br> 5级为“管理员”；<br> 输入其他，则输出：&quot;无效输入，请输入正确的级别号（1-5）！&quot;<br> 使用多分支结构设计如下。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#设计用户管理模块，对用户身份进行判断。使用多分支结构设计如下。</span>
grade <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的级别：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> grade <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;游客&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> grade <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;会员：普通会员&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> grade <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;会员：高级会员&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> grade <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;会员：超级会员&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> grade <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;管理员&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;无效输入，请输入正确的级别号（1-5）！&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-----&quot;</span><span class="token operator">*</span><span class="token number">55</span><span class="token punctuation">)</span>

<span class="token comment"># 使用逻辑运算来写，如下：</span>

grade1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的级别：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">(</span>grade1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> <span class="token string">&quot;游客&quot;</span> <span class="token keyword">or</span>
       grade1 <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token string">&quot;会员：普通会员&quot;</span> <span class="token keyword">or</span>
       grade1 <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> <span class="token string">&quot;会员：高级会员&quot;</span> <span class="token keyword">or</span>
       grade1 <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token string">&quot;会员：超级会员&quot;</span> <span class="token keyword">or</span>
       grade1 <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> <span class="token string">&quot;管理员&quot;</span> <span class="token keyword">or</span>
                        <span class="token string">&quot;无效输入，请输入正确的级别号（1-5）！&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321065.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-2-逻辑或-运算" tabindex="-1"><a class="header-anchor" href="#_6-2-逻辑或-运算" aria-hidden="true">#</a> 6.2 逻辑或 运算</h3><blockquote><p>or 表示两个操作数中只要有一个为True，就返回True；否则就返回False。</p></blockquote><ul><li>图解：</li></ul><table><thead><tr><th>第一个操作数</th><th>第二个操作数</th><th>运算结果</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>True</td></tr><tr><td>False</td><td>True</td><td>True</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table><p>  逻辑或也是一种短路逻辑：如果左侧表达式为 True，则直接短路返回结果，不再运算右侧表达；</p><ul><li>【示例】 假设某校招特长生，设定如下了个招生标准：<br> 第一类，如果钢琴等级在 9 级或以上，且计算机等级在 4 级或以上，则直接通过：；<br> 第二类，如果文化课非常优秀（90分及以上），可以适当降低特长标准，钢琴等级在 5 级或以上，且计算机拿 2 级或以上；<br> 第三类，如果文化课及格（60分及以上，90分以下），则按正常标准录取，钢琴等级在 7 级或以上，且计算机等级在3级或以上。<br> 根据上述设定条件，编写简单的特招录取检测程序如下。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 首先，找出上述所需的条件都有哪些：考号、文化课成绩、钢琴等级、计算机等级</span>
<span class="token comment"># 其次，要求用户输入自己的成绩</span>
<span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入自己的考号：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token operator">&gt;</span> <span class="token number">20230601</span> <span class="token keyword">and</span> <span class="token builtin">id</span> <span class="token operator">&lt;</span> <span class="token number">20232000</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;符合招生条件，请填成绩单！&quot;</span><span class="token punctuation">)</span>
    culture <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入自己的文化课成绩：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    piano <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入自己的钢琴等级：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    computer <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入自己的计算机等级：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 判断：钢琴大于等于9级并且计算机大于等于4级，录取；或者；文化大于等于90并且钢琴大于等于5级并且计算机大于等于2级，录取；或者；文化大于等于60并且小于90（合格）并且钢琴大于等于7级并且计算机大于等于3级，录取。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>piano <span class="token operator">&gt;=</span> <span class="token number">9</span> <span class="token keyword">and</span> computer <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>culture <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token keyword">and</span> piano <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token keyword">and</span> computer <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>culture <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">and</span> culture <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token keyword">and</span> piano <span class="token operator">&gt;=</span> <span class="token number">7</span> <span class="token keyword">and</span> computer <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜被我校录用！！！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;很遗憾，您被淘汰了！&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;不符合招生条件！&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321202.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上述示例仅做测试数据，不可用到生活中，如需用到生活中，需要改一些代码；因为：我这还有一些漏洞的，比如：成绩和等级没有上限和下限，只有高于。</p><h3 id="_6-3-逻辑非-运算" tabindex="-1"><a class="header-anchor" href="#_6-3-逻辑非-运算" aria-hidden="true">#</a> 6.3 逻辑非 运算</h3><blockquote><p>not 仅包含一个操作数，表示把操作数转换为布尔值，然后返回取反后的布尔值。<br> 逻辑与 和 逻辑或 运算的返回值不必是布尔值，但是逻辑非运算的返回值一定是布尔值，而不是表达式的原值；</p></blockquote><p>【示例】逻辑非运算，如果执行两次逻辑非运算操作，相当于把操作数转换为布尔值；</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment"># 返回True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># 返回False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># 返回True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 返回False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token comment"># 返回True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span>             <span class="token comment"># 返回True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>               <span class="token comment"># 返回True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、位运算" tabindex="-1"><a class="header-anchor" href="#_7、位运算" aria-hidden="true">#</a> 7、位运算</h2><p>位运算符一共有6个，分为如下两类：</p><ul><li>逻辑位运算：位与（&amp;）、位或（|）、位异或（^）、位非（~）</li><li>移位运算：左移（&lt;&lt;）和右移（&gt;&gt;）</li></ul><h3 id="_7-1-逻辑位运算" tabindex="-1"><a class="header-anchor" href="#_7-1-逻辑位运算" aria-hidden="true">#</a> 7.1 逻辑位运算</h3><ul><li>图解1：&amp; 位与运算符</li></ul>`,122),x=e("<table><thead><tr><th>第一个数值</th><th>第二个数值</th><th>运算结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><ul><li>图解2：| 位或运算符</li></ul>",2),T=e("<table><thead><tr><th>第一个数值</th><th>第二个数值</th><th>运算结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><ul><li>图解3：^ 位异或运算符</li></ul>",2),F=s("br",null,null,-1),j=e("<table><thead><tr><th>第一个数值</th><th>第二个数值</th><th>运算结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><ul><li>图解4：~ 位非运算符</li></ul>",2),z=e(`<p>【示例】使用位运算对用户输入的数字进行加密。加密过程如下：<br> 第1步：先接收用户输入的数字（仅接收整数）；<br> 第2步：对数字执行左移5位运算符；（为运算为超纲，在下一小节来着，不过前面已经说了移位符号，那么应该可以理解的；）<br> 第3步：在对移位后的数字执行按位取反运算；<br> 第4步：去掉负号。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>password <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字（仅接收整数）：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的数字为：%s&quot;</span><span class="token operator">%</span>password<span class="token punctuation">)</span>                    <span class="token comment"># %s占位符，%password将值给到占位符</span>
new_password <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>password <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment"># -为去掉负号，~为取反，&lt;&lt; 5 为向左偏移5.</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对数字执行左移5位运算符结果为：%s&quot;</span><span class="token operator">%</span>new_password<span class="token punctuation">)</span>
old_password <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>new_password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">5</span>               <span class="token comment"># -为去掉负号，~为取反，&lt;&lt; 5 为向右偏移5.</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;在对移位后的数字执行按位取反运算结果为：%s&quot;</span><span class="token operator">%</span>old_password<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321403.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_7-2-移位运算" tabindex="-1"><a class="header-anchor" href="#_7-2-移位运算" aria-hidden="true">#</a> 7.2 移位运算</h3>`,4),C=s("br",null,null,-1),P=e(`<p>【示例1】左移位</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 5向左移位2</span>
<span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token comment"># 结果为20</span>


<span class="token comment">#我们可以看一下</span>
<span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">5</span>的二进制为：<span class="token number">0b101</span>
<span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token number">20</span>的二进制为；<span class="token number">0b10100</span>

<span class="token number">5</span>向左移位<span class="token number">2</span>位，二进制数加两个<span class="token number">0</span>，所以结果为<span class="token number">0b10100</span>，所以最终结果为：<span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例2】右移位</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 5向右移位2</span>
<span class="token number">5</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span>	<span class="token comment"># 结果为1</span>


<span class="token comment">#我们可以看一下</span>
<span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">5</span>的二进制为：<span class="token number">0b101</span>
<span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">1</span>的二进制为；<span class="token number">0b1</span>

<span class="token number">5</span>向右移位<span class="token number">2</span>位，二进制数减两位，所以结果为<span class="token number">0b1</span>，所以最终结果为：<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例3】设计输入一个正整数，求这个正整数转化为二进制数后1的个数。<br> 设计思路：假设一个整数变量number，number&amp; 1 有两种可能：1或0。当结果为1时，说明最低位为1；当结果为0时，说明最低位为0。可以通过&gt;&gt;运算符右移一位，再求number&amp; 1，直到number为0。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token number">0</span>                                 <span class="token comment"># 定义变量统计 1 的个数</span>
    number <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个正整数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 输入一个正整数</span>
    temp <span class="token operator">=</span> number                             <span class="token comment"># 备份输入的数字</span>
    <span class="token keyword">if</span> number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                            <span class="token comment"># 输入正整数时</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                           <span class="token comment"># 无限次循环</span>
            <span class="token keyword">if</span> number <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>               <span class="token comment"># 最后一位为1</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token comment"># 统计1 的个数</span>
            number <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span>                      <span class="token comment"># 右移一位，并赋值给自己</span>
            <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                   <span class="token comment"># 数位0时</span>
                <span class="token keyword">break</span>                         <span class="token comment"># 退出循环（break什么意思后面会讲，这里只要知道他是退出的意思就行）</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token string">&quot;的二进制数中1的个数为：&quot;</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>    <span class="token comment"># 打印结果</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>                                      <span class="token comment"># 输入非正整数时</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数不符合规范&quot;</span><span class="token punctuation">)</span>                <span class="token comment"># 打印提示语句</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161321839.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_8、其他运算" tabindex="-1"><a class="header-anchor" href="#_8、其他运算" aria-hidden="true">#</a> 8、其他运算</h2><p>其他运算符一共有4个，分为如下两类：</p><p>成员运算：in 、 not in<br> 身份运算：is 、 is not</p><blockquote><p>in：表示是否是成员；适用于：字符串、列表、元组<br> is：比较两个对象是否相同（内存地址是否相等）<br> == ： 比较两个对是否相等（对象的值和类型是否相等）</p></blockquote><h3 id="_8-1-成员运算" tabindex="-1"><a class="header-anchor" href="#_8-1-成员运算" aria-hidden="true">#</a> 8.1 成员运算</h3><blockquote><p>成员运算符包含两种：in 和 not in</p></blockquote><ul><li>图解：</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的对象中 找到元素值，则返回True，否则返回False</td><td>str = &quot;adfasdfa&quot; print (&quot;a&quot; in str) # 返回True</td></tr><tr><td>not in</td><td>如果在指定的对象中 没有找到元素值，则返回True，否则返回False</td><td>str = &quot;adfasdfa&quot; print (&quot;a&quot; not in str) # 返回True</td></tr></tbody></table><ul><li>【示例1】运算符 in 示例：</li></ul><p>输出 a ，在str中寻找，找到了，则返回True。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;adfasdfa&quot;</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token comment"># 返回True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>【示例2】运算符 not in 示例：</li></ul><p>输出 a ，在str中寻找，找到了，则返回False。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;adfasdfa&quot;</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token comment"># 返回False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>【示例3】检测用户输入的数字是否已经存在指定的列表中；<br> 存在，则继续输入 或者退出。<br> 不存在，则附加到列表中，并询问是否继续或退出；</p></li><li><p>不加解析</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> num <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数字已经存在啦！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;不存在，输入的数字将被添加到列表中哈！&quot;</span><span class="token punctuation">)</span>
    ok <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数字存在，是否继续输入：（y/n）&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> ok <span class="token operator">==</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">elif</span> ok <span class="token operator">==</span> <span class="token string">&quot;n&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入的字符有误，退出程序，如要继续运行，请重新开始&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义一个列表（后面会学到，【字典与集合】）</span>
<span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
<span class="token comment"># 使用无限循环检测用户输入的数字</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># 检测用户输入的数字</span>
    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 判断：如果用户输入的数字（num）有上面定义的列表（list）中的值，则返回存在，并询问是否继续或退出；没有则返回：不存在，则附加到列表中。</span>
    <span class="token keyword">if</span> num <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数字已经存在啦！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;不存在，输入的数字将被添加到列表中哈！&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># if 判断完毕，将会询问是否继续，如果继续，则继续while操作；如果退出，则输出list所有的值：包括不存在后自动加进去的值，并退出；如果输入的其他值，则会提示并停止运行</span>
    ok <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数字存在，是否继续输入：（y/n）&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> ok <span class="token operator">==</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">elif</span> ok <span class="token operator">==</span> <span class="token string">&quot;n&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入的字符有误，退出程序，如要继续运行，请重新开始&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161320356.png" alt="" loading="lazy"><br><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161320897.png" alt="" loading="lazy"></p><h3 id="_8-2-身份运算" tabindex="-1"><a class="header-anchor" href="#_8-2-身份运算" aria-hidden="true">#</a> 8.2 身份运算</h3><blockquote><p>身份运算包含2个运算符；<br> 主要用于比较两个对象的内存地址是否相同。is 用于判断变量的引用地址是否相等，==运算符判断变量的类型和值是否相等。使用<code>id()</code> 函数可以获取引用地址，因此：<code>a is b 相当于 id(a) == id(b)</code></p></blockquote><ul><li>图解：</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是否引用同一个对象</td></tr><tr><td>is not</td><td>判断两个标识符是否引用不同的对象</td></tr></tbody></table><ul><li>【示例1】运算符 is 示例：</li></ul><p>判断a 和 b的值是否一样，一样输出：True，不一样输出：False</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>	<span class="token comment"># 结果为False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>【示例2】运算符 is not 示例：</li></ul><p>判断a 和 b的值是否一样，一样输出：False，不一样输出：True</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">)</span>	<span class="token comment"># 结果为True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>【示例3】出于性能考虑，凡是不可变对象，只要值相同，Python 就不会重复创建，而是引用己存在的对象。 因此，对于不可变对象来说，如果两个值相同，使用 is 可以判断它们是否是同一个对象。例如：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>           <span class="token comment"># 定义字符串a=1</span>
b <span class="token operator">=</span> <span class="token number">1</span>           <span class="token comment"># 定义字符串b=1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>   <span class="token comment"># 输出 a 是否等于 b，结果为：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出a的id</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出b的id</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>   <span class="token comment"># 判断a的id是否等于b的id，结果为：True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来说，只要值是一样的，他们的id就是一样的，不会重复创建，利于性能。</p><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161320433.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>【示例4】假设 n 是一个任意的自然数，若将 n 的各位数字反向排序所得自然数 n1 与 n 相等，则称 n 为回文数。<br> 例如：如果 n =123123，则称 n 为回文数；但如果n = 123456，则不为回文数。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num1 <span class="token operator">=</span> num2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个自然数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 输入一个自然数</span>
t <span class="token operator">=</span> <span class="token number">0</span>                           <span class="token comment"># 设置中间变量</span>
<span class="token keyword">while</span> num2 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token comment"># 输入数据大于0时</span>
    t <span class="token operator">=</span> t<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>num2 <span class="token operator">%</span> <span class="token number">10</span>          <span class="token comment"># 将数据尾数依次存入t中</span>
    num2 <span class="token operator">//=</span> <span class="token number">10</span>                 <span class="token comment"># 数据取整</span>
<span class="token keyword">if</span> num1 <span class="token operator">==</span> t<span class="token punctuation">:</span>                   <span class="token comment"># 反向排列的数与原数相等</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span><span class="token string">&quot;是一个回文数&quot;</span><span class="token punctuation">)</span>    <span class="token comment"># 输出的是回文数</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>                           <span class="token comment"># 反向排列的数与原数不相等</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span><span class="token string">&quot;不是一个回文数&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># 输出的不是回文数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、案例实战" tabindex="-1"><a class="header-anchor" href="#_9、案例实战" aria-hidden="true">#</a> 9、案例实战</h2><blockquote><p>下面为结合本章的知识来提出的一些案例实战，可能会有超纲的内容，可以先大概的看一下，等到学完，我会专门整理一个所有课程案例实战的文章，供大家参考，到时候看所有案例都知道是什么意思了。</p></blockquote><h3 id="_9-1-模拟进度条" tabindex="-1"><a class="header-anchor" href="#_9-1-模拟进度条" aria-hidden="true">#</a> 9.1 模拟进度条</h3><p>通过格式化输出的方式，可以模拟加载进度条。</p><blockquote><p>提示：主要使用time模块的sleep()函数模拟加载的进度，然后使用for语句逐步打印进度显示条。</p></blockquote><ul><li>不加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time
length <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    percetange <span class="token operator">=</span> i <span class="token operator">/</span> length <span class="token operator">*</span> <span class="token number">100</span>
    block <span class="token operator">=</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\r加载条：|{:&lt;20}|{:&gt;6.1f}%&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span>percetange<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入time模块</span>
<span class="token keyword">import</span> time
<span class="token comment"># 定义长度变量</span>
length <span class="token operator">=</span> <span class="token number">100</span>
<span class="token comment"># 循环遍历1-100的数，从1开始，每次加1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 计算进度条的百分比，当前循环的数（i）除以length然后乘以100。</span>
    percetange <span class="token operator">=</span> i <span class="token operator">/</span> length <span class="token operator">*</span> <span class="token number">100</span>
    <span class="token comment"># 计算进度条的个数</span>
    block <span class="token operator">=</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 让程序停止0.1秒，可以让我们更好的看到加载的效果</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token comment"># 格式化输出，打印出加载条和百分比。</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\r加载条：|{:&lt;20}|{:&gt;6.1f}%&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span>percetange<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 比如i为1时：</span>
<span class="token comment"># for循环 i = 1</span>
<span class="token comment"># percetange计算为：1 / 100 * 100 从左到右 = 0.1*100 = 1.0（计算出来结果为浮点数，所以带个.）</span>
<span class="token comment"># block计算为：&#39;#&#39; * int(1 // (100 / 20)) 代表的是进度条为100，每余5则为一个#号，计算为：1 // (5) = 0，所以1没有输出#号</span>
<span class="token comment"># time.sleep(0.1) 停止0.1秒继续运行，可以让我们更好的看到加载的效果</span>
<span class="token comment"># 输出：\\r为回车符号，回车后会回到开头，并将前面的输出全部覆盖在输出，形成动态更新的效果，如果不添加的话，就会一直横着输出，感兴趣的可以自己试一试；</span>
<span class="token comment"># &#39;{:&lt;20}&#39;和&#39;{:&gt;6.1f}%&#39;是格式化字符串，分别表示左对齐的20个字符宽度的字符串和至少有6个字符宽度、小数点后有1位的浮点数并加上百分号。</span>

<span class="token comment"># 比如i为5时：</span>
<span class="token comment"># for循环 i = 5</span>
<span class="token comment"># percetange计算为：5 / 100 * 100 从左到右 = 0.5*100 = 5.0（计算出来结果为浮点数，所以带个.）</span>
<span class="token comment"># block计算为：&#39;#&#39; * int(5 // (100 / 20)) 代表的是进度条为100，每余5则为一个#号，计算为：5 // (5) = 1，所以会输出一个#号</span>
<span class="token comment"># time.sleep(0.1) 停止0.1秒继续运行，可以让我们更好的看到加载的效果</span>
<span class="token comment"># 输出：\\r为回车符号，回车后会回到开头，并将前面的输出全部覆盖在输出，形成动态更新的效果，如果不添加的话，就会一直横着输出，感兴趣的可以自己试一试；</span>
<span class="token comment"># &#39;{:&lt;20}&#39;和&#39;{:&gt;6.1f}%&#39;是格式化字符串，分别表示左对齐的20个字符宽度的字符串和至少有6个字符宽度、小数点后有1位的浮点数并加上百分号。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161320978.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,52),I=e(`<h3 id="_9-2-统计学生成绩" tabindex="-1"><a class="header-anchor" href="#_9-2-统计学生成绩" aria-hidden="true">#</a> 9.2 统计学生成绩</h3><p>设计程序计算学生语文成绩的平均分，筛选出优秀生名单，输出最高分。</p><blockquote><p>提示：使用字典结构来记录学生成绩，通过len() 函数获取字典包含学生总人数。</p></blockquote><ul><li>不加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name_cj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;张三&quot;</span><span class="token punctuation">:</span><span class="token number">89</span><span class="token punctuation">,</span>
    <span class="token string">&quot;李四&quot;</span><span class="token punctuation">:</span><span class="token number">76</span><span class="token punctuation">,</span>
    <span class="token string">&quot;王五&quot;</span><span class="token punctuation">:</span><span class="token number">95</span><span class="token punctuation">,</span>
    <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">:</span><span class="token number">66</span><span class="token punctuation">,</span>
    <span class="token string">&quot;侯七&quot;</span><span class="token punctuation">:</span><span class="token number">77</span><span class="token punctuation">,</span>
    <span class="token string">&quot;老八&quot;</span><span class="token punctuation">:</span><span class="token number">99</span>
<span class="token punctuation">}</span>
<span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">0</span>
max_name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;语文成绩优秀生名单：&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> name_cj<span class="token punctuation">:</span>
    <span class="token builtin">sum</span> <span class="token operator">+=</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">85</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%s(%.2f)&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>
        <span class="token builtin">max</span> <span class="token operator">=</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        max_name <span class="token operator">=</span> i
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;语文平均分为：%2.f&quot;</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>name_cj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;语文最高分为：%2.f(%s)&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">,</span>max_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义一个字典结构，内含：姓名及语文成绩（字典结构后面会学到）</span>
name_cj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;张三&quot;</span><span class="token punctuation">:</span><span class="token number">89</span><span class="token punctuation">,</span>
    <span class="token string">&quot;李四&quot;</span><span class="token punctuation">:</span><span class="token number">76</span><span class="token punctuation">,</span>
    <span class="token string">&quot;王五&quot;</span><span class="token punctuation">:</span><span class="token number">95</span><span class="token punctuation">,</span>
    <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">:</span><span class="token number">66</span><span class="token punctuation">,</span>
    <span class="token string">&quot;侯七&quot;</span><span class="token punctuation">:</span><span class="token number">77</span><span class="token punctuation">,</span>
    <span class="token string">&quot;老八&quot;</span><span class="token punctuation">:</span><span class="token number">99</span>
<span class="token punctuation">}</span>
<span class="token comment"># 总分：初始值为0</span>
<span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment"># 最高分：初始值为0</span>
<span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment"># 最高分的姓名：初始值为空</span>
max_name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token comment"># 输出语文成绩优秀生名单，但是到这块还不会输出任何值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;语文成绩优秀生名单：&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 开始一个for循环，遍历字典name_cj字典。在每次循环中，i都会是字典的一个键，也就是一个学生的名字和成绩。</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> name_cj<span class="token punctuation">:</span>
    <span class="token comment"># 将当前学生的语文成绩加到sum上，迭代成绩表</span>
    <span class="token builtin">sum</span> <span class="token operator">+=</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment"># 判断，如果当前学生的语文成绩大于等于85，那么打印出他们的名字和成绩，也就是过滤出优秀的学生。</span>
    <span class="token keyword">if</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">85</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%s(%.2f)&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 判断，如果当前学生的语文成绩大于max（也就是目前的最高成绩），那么更新max和max_name，以便记录新的最高成绩和对应的学生名字。</span>
    <span class="token keyword">if</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>
        <span class="token comment"># 过滤最高分</span>
        <span class="token builtin">max</span> <span class="token operator">=</span> name_cj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token comment"># 过滤最高分的学生的姓名</span>
        max_name <span class="token operator">=</span> i
<span class="token comment"># 输出一个空行，用来区分，自己也可以用其他来带代替；</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 输出平均分；这是通过计算sum（所有成绩的总和）除以学生数量得到的。</span>
<span class="token comment">#%2.f在Python语言中是一个字符串格式化的指令，它表示一个浮点数(float)的占位符。其中，&#39;.&#39;后的&#39;2&#39;代表小数点后的位数。因此，&#39;%2.f&#39;将sum/len(name_cj)的结果转化为一个保留两位小数的浮点数。</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;语文平均分为：%2.f&quot;</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>name_cj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 输出语文最高分和最高分的姓名</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;语文最高分为：%2.f(%s)&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">,</span>max_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161320041.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_9-3-逐位推算" tabindex="-1"><a class="header-anchor" href="#_9-3-逐位推算" aria-hidden="true">#</a> 9.3 逐位推算</h3><p>如果输入一个尾数是 3 或者 9 的数字，判断至少需要用含有多少个9的数字才能整除该数。</p><ul><li>不加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>divsior <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字[末尾是 3 或 9 的数字]：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token boolean">True</span>
count <span class="token operator">=</span> <span class="token number">1</span>
num <span class="token operator">=</span> <span class="token number">9</span>
dividend <span class="token operator">=</span> <span class="token number">9</span>
<span class="token keyword">while</span> flag<span class="token punctuation">:</span>
    <span class="token keyword">if</span> dividend <span class="token operator">%</span> divsior <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        flag <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        num <span class="token operator">*=</span> <span class="token number">10</span>
        dividend <span class="token operator">+=</span> num
        count <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}个9可以被{}整除&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>divsior<span class="token punctuation">)</span><span class="token punctuation">)</span>
r <span class="token operator">=</span> dividend <span class="token operator">/</span> divsior
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}/{} = {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dividend<span class="token punctuation">,</span>divsior<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义一个变量叫divsior，接收一个尾数为 3 或 9 的数字</span>
divsior <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字[末尾是 3 或 9 的数字]：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 定义标记变量，初始值设置为：True；此变量用于控制接下来的 &#39;while&#39; 循环。</span>
flag <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token comment"># 定义统计变量，值为 &#39;1&#39;。此变量用于跟踪需要多少个9才能被 &#39;divsior&#39; 整除。</span>
count <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 定义常数9，此变量用于构建可被 &#39;divsior&#39; 整除的数字。</span>
num <span class="token operator">=</span> <span class="token number">9</span>
<span class="token comment"># 定义变量 &#39;dividend&#39;，值为 &#39;9&#39;。这是我们将尝试被 &#39;divsior&#39; 整除的数字。</span>
dividend <span class="token operator">=</span> <span class="token number">9</span>
<span class="token comment"># 循环判断；只要 &#39;flag&#39; 为 &#39;True&#39;，就会执行这个循环。循环的目标是找到一个数字，该数字由足够多的9组成，可以被 &#39;divsior&#39; 整除。</span>
<span class="token keyword">while</span> flag<span class="token punctuation">:</span>
    <span class="token comment"># 检查 &#39;dividend&#39; 是否可以被 &#39;divsior&#39; 整除。如果可以，则 &#39;flag&#39; 设置为 &#39;False&#39;，结束循环。</span>
    <span class="token keyword">if</span> dividend <span class="token operator">%</span> divsior <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        flag <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token comment"># 如果 &#39;dividend&#39; 不能被 &#39;divsior&#39; 整除，则执行下面的代码。</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment"># 将 &#39;num&#39; 的值乘以10，为在下一次循环迭代中增加一个新的9做准备。</span>
        num <span class="token operator">*=</span> <span class="token number">10</span>
        <span class="token comment"># 将 &#39;num&#39;（当前为9）添加到 &#39;dividend&#39;。</span>
        dividend <span class="token operator">+=</span> num
        <span class="token comment"># 由于我们添加了一个9到 &#39;dividend&#39;，所以我们需要增加计数器。</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token comment"># 此行打印出需要多少个9才能被 &#39;divsior&#39; 整除。</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}个9可以被{}整除&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>divsior<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 计算并存储商。</span>
r <span class="token operator">=</span> dividend <span class="token operator">/</span> divsior
<span class="token comment"># 打印出被除数、除数和商。</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}/{} = {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dividend<span class="token punctuation">,</span>divsior<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 其他解析：</span>
<span class="token comment"># {}在Python中是格式化字符串的占位符，它会被.format()方法中对应位置的参数替代。</span>
<span class="token comment"># .format()方法是Python中的一个字符串方法，用于格式化字符串。它将传入的参数插入字符串中的{}占位符位置。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161320876.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_9-4-数字运算器" tabindex="-1"><a class="header-anchor" href="#_9-4-数字运算器" aria-hidden="true">#</a> 9.4 数字运算器</h3><p>设计一个简单的四则运算器，允许用户输入两个数字和四则运算符，然后返回运算结果。</p><blockquote><p>四则运算器是什么？<br> 四则运算器是指可以进行加、减、乘、除运算的计算器，被称为：四则运算器。</p></blockquote><ul><li>无解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    number1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第一个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入【+ - * /】：&quot;</span><span class="token punctuation">)</span>
    number2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第二个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    operator <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">+</span> number2<span class="token punctuation">,</span>
        <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">-</span> number2<span class="token punctuation">,</span>
        <span class="token string">&#39;*&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">*</span> number2<span class="token punctuation">,</span>
        <span class="token string">&#39;/&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">/</span> number2
    <span class="token punctuation">}</span>
    result <span class="token operator">=</span> operator<span class="token punctuation">.</span>get<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">&#39;输入运算符 + - * / ：&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;运算结果为：%d&quot;</span><span class="token operator">%</span>result<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span>
    Continue <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;是否继续计算？（y/n）&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> Continue <span class="token operator">==</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">elif</span> Continue <span class="token operator">==</span> <span class="token string">&quot;n&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入有误，退出计算器&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加解析</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个无限循环</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># 提示用户输入第一个数字，并将其转换为整数类型，然后存储在变量number1中。</span>
    number1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第一个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 提示用户输入一个运算符，可以是&#39;+&#39;，&#39;-&#39;，&#39;&#39;或&#39;/&#39;，然后存储在变量x中。</span>
    x <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入【+ - * /】：&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 提示用户输入第二个数字，并将其转换为整数类型，然后存储在变量number2中。</span>
    number2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第二个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 创建了一个字典，键是运算符，值是对应的运算结果。</span>
    operator <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">+</span> number2<span class="token punctuation">,</span>
        <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">-</span> number2<span class="token punctuation">,</span>
        <span class="token string">&#39;*&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">*</span> number2<span class="token punctuation">,</span>
        <span class="token string">&#39;/&#39;</span><span class="token punctuation">:</span>number1 <span class="token operator">/</span> number2
    <span class="token punctuation">}</span>
    <span class="token comment"># 从字典中获取与用户输入的运算符对应的运算结果。如果用户输入了无效的运算符，则返回提示信息。</span>
    <span class="token comment"># operator.get是什么意思？答：这是Python语言中的字典（dictionary）的get方法。字典是一种存储键值对（key-value pairs）的数据结构。</span>
    <span class="token comment"># 在这个例子中，operator是一个字典，x是要查找的键。如果x在字典中，则get方法会返回对应的值；如果x不在字典中，则get方法会返回&#39;输入运算符 + - * / ：&#39;这个默认值。</span>
    result <span class="token operator">=</span> operator<span class="token punctuation">.</span>get<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">&#39;输入运算符 + - * / ：&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 打印运算结果：%d为占位符，%result为查找字典中的计算结果；</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;运算结果为：%d&quot;</span><span class="token operator">%</span>result<span class="token punctuation">)</span>
    <span class="token comment"># 输出---在*6个--，用来做分割用的，可有可无，为了观看方便，所以就加上了；后续不需要可以去掉的。</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token comment"># 这里提示一下：定义变量Continue不能用小写的continue，会报错；</span>
    <span class="token comment"># 提示用户是否要继续计算，</span>
    <span class="token comment"># 继续输入y：然后返回继续计算；</span>
    <span class="token comment"># 不继续输入x：然后退出程序；</span>
    <span class="token comment"># 输入的不是 y 或者 n ，则提示：输入有误，退出计算器。</span>
    Continue <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;是否继续计算？（y/n）&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> Continue <span class="token operator">==</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">elif</span> Continue <span class="token operator">==</span> <span class="token string">&quot;n&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入有误，退出计算器&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161320483.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr>`,24),A={href:"https://blog.csdn.net/liu_chen_yang/category_11693372.html?spm=1001.2014.3001.5482",target:"_blank",rel:"noopener noreferrer"},N=s("br",null,null,-1),S=s("br",null,null,-1);function H(V,B){const o=l("ExternalLinkIcon"),t=l("font");return i(),u("div",null,[s("blockquote",null,[k,s("p",null,[n("  🏅"),s("a",d,[n("云计算领域优质创作者"),a(o)]),m,n("   🏅"),s("a",b,[n("华为云开发者社区专家博主"),a(o)]),v,n("   🏅"),s("a",g,[n("阿里云开发者社区专家博主"),a(o)]),y,n(" 💊"),h,s("a",w,[n("运维交流社区"),a(o)]),n(" 欢迎大家的加入！"),q,n(" 🐋 希望大家多多支持，我们一起进步！😄"),f,n(" 🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗")])]),_,s("blockquote",null,[s("p",null,[n("& 运算符表示"),a(t,{color:"red"},{default:p(()=>[n(" 位与")]),_:1}),n("，对两个二进制操作数逐位进行比较。在位运算中，True代表的1，False代表的是0。和上述的"),a(t,{color:"red"},{default:p(()=>[n(" 逻辑与 ")]),_:1}),n("是一个道理；")])]),x,s("blockquote",null,[s("p",null,[n("| 运算符表示"),a(t,{color:"red"},{default:p(()=>[n(" 位或")]),_:1}),n("，对两个二进制操作数逐位进行比较。和上述的"),a(t,{color:"red"},{default:p(()=>[n(" 逻辑或")]),_:1}),n(" 是一个道理；")])]),T,s("blockquote",null,[s("p",null,[n("^ 运算符表示"),a(t,{color:"red"},{default:p(()=>[n(" 位异或")]),_:1}),n("，对两个二进制操作数逐位进行比较。"),F,n(" 只要第一个数值和第二个数值不一样（一个1或一个0），则运算结果为1（True）；相反，数值1和数值2结果相同时，运算结果为0（False）")])]),j,s("blockquote",null,[s("p",null,[n("~ 运算符表示"),a(t,{color:"red"},{default:p(()=>[n(" 位非")]),_:1}),n("，对一个二进制操作数逐位进行取反操作。")])]),z,s("blockquote",null,[a(t,{color:"red"},{default:p(()=>[n(" << 运算符为左移位运算符；")]),_:1}),n("在移位运算过程中，符号位始终保持不变，如果右侧空出位置，则自动填充为0；如果超过32为值，则自动丢弃。"),C,a(t,{color:"red"},{default:p(()=>[n(" >> 运算符为右移位运算符；")]),_:1}),n("与左移位运算相反；它吧32位的二进制数中的所有有效位整体右移，再使用符号位的值填充空位。移动过程中超出的值将被丢弃。")]),P,s("blockquote",null,[a(t,{color:"red"},{default:p(()=>[n("附加提示：\\r为回车符号，回车后会回到开头，并将前面的输出全部覆盖在输出，形成动态更新的效果，如果不添加的话，就会一直横着输出，感兴趣的可以自己试一试；")]),_:1})]),I,s("blockquote",null,[s("p",null,[n("讲到这里就完成了第八篇《Python的表达式》，接下来我还会持续输出Python学习文章，大家可以订阅我的专栏："),s("a",A,[n("《python 学习》"),a(o)]),N,n(" 🐋 希望大家多多支持，我们一起进步！😄"),S,n(" 🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗")])])])}const W=c(r,[["render",H],["__file","【Python学习第八篇】表达式 -- 运算符.html.vue"]]);export{W as default};
