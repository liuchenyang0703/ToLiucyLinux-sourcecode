import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as o,a as n,b as e,d as s,w as d,e as c}from"./app-6706a352.js";const u={},p=n("p",null,[e("👨‍🎓"),n("strong",null,"博主简介")],-1),b={href:"https://blog.csdn.net/liu_chen_yang?type=blog",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),h={href:"https://blog.csdn.net/liu_chen_yang?type=blog",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),v={href:"https://bbs.huaweicloud.com/community/myblog",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),f={href:"https://developer.aliyun.com/my?spm=a2c6h.13148508.setting.3.21fc4f0eCmz1v3#/article?_k=zooqoz",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),x=n("strong",null,"交流社区：",-1),y={href:"https://bbs.csdn.net/forums/lcy",target:"_blank",rel:"noopener noreferrer"},z=n("br",null,null,-1),w=n("br",null,null,-1),C=n("hr",null,null,-1),G=n("figure",null,[n("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412201049085.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),V=n("h2",{id:"一、前言需求",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、前言需求","aria-hidden":"true"},"#"),e(" 一、前言需求：")],-1),L=n("blockquote",null,[n("p",null,"在麒麟V10 arm64架构的服务器上需要使用到gcc9.3，但麒麟V10自带的gcc版本是7.3，麒麟系统自带的sp1和sp2源，默认的gcc版本都是7.3，所以需要升级到gcc9.3才能使用；")],-1),j={href:"http://update.cs2c.com.cn:8080/NS/V10/",target:"_blank",rel:"noopener noreferrer"},N=n("h2",{id:"二、gcc-9-3安装包下载",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、gcc-9-3安装包下载","aria-hidden":"true"},"#"),e(" 二、GCC 9.3安装包下载")],-1),I=n("p",null,"gcc安装包下载地址：",-1),q={href:"https://ftp.gnu.org/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.gz",target:"_blank",rel:"noopener noreferrer"},B=n("br",null,null,-1),S={href:"http://ftp.gnu.org/gnu/gcc/",target:"_blank",rel:"noopener noreferrer"},X=c(`<p>可以在服务器上使用wget下载，也可以直接下载上传到服务器上；</p><h2 id="三、服务器操作" tabindex="-1"><a class="header-anchor" href="#三、服务器操作" aria-hidden="true">#</a> 三、服务器操作</h2><h3 id="_3-1-下载所需依赖包" tabindex="-1"><a class="header-anchor" href="#_3-1-下载所需依赖包" aria-hidden="true">#</a> 3.1 下载所需依赖包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装gcc gcc-c++ glibc-static make</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ glibc-static <span class="token function">make</span>
<span class="token comment"># 安装bzip2</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">bzip2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-解压-gcc-安装包" tabindex="-1"><a class="header-anchor" href="#_3-2-解压-gcc-安装包" aria-hidden="true">#</a> 3.2 解压 GCC 安装包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> xf gcc-9.3.0.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-下载相关的依赖和组件" tabindex="-1"><a class="header-anchor" href="#_3-3-下载相关的依赖和组件" aria-hidden="true">#</a> 3.3 下载相关的依赖和组件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#先切换到gcc9.3的目录下</span>
<span class="token builtin class-name">cd</span> gcc-9.3.0
<span class="token comment">#下载相关的依赖和组件</span>
./contrib/download_prerequisites
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果执行：<code>./contrib/download_prerequisites</code>此操作报错：<code>error: Cannot download gmp-6.1.0.tar.bz2 from ftp://gcc.gnu.org/pub/gcc/infrastructure/</code>，那么就手动下载一下（使用清华大学源手动下载）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载gmp-6.1.0</span>
<span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/gmp-6.1.0.tar.xz
<span class="token comment"># 解压</span>
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> gmp-6.1.0.tar.xz
<span class="token comment"># 重命名</span>
<span class="token function">mv</span> gmp-6.1.0 gmp
 
<span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/mpfr-3.1.4.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> mpfr-3.1.4.tar.gz
<span class="token function">mv</span> mpfr-3.1.4 mpfr
 
<span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/mpc-1.0.3.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> mpc-1.0.3.tar.gz
<span class="token function">mv</span> mpc-1.0.3 mpc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-新建一个build目录在gcc9-3-0目录中用于存放编译文件" tabindex="-1"><a class="header-anchor" href="#_3-4-新建一个build目录在gcc9-3-0目录中用于存放编译文件" aria-hidden="true">#</a> 3.4 新建一个build目录在gcc9.3.0目录中用于存放编译文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-5-编译、安装" tabindex="-1"><a class="header-anchor" href="#_3-5-编译、安装" aria-hidden="true">#</a> 3.5 编译、安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#创建完文件夹之后，进入文件夹</span>
<span class="token builtin class-name">cd</span> build
<span class="token comment">#进入之后编译，指定目录编译安装；</span>
<span class="token punctuation">..</span>/configure <span class="token parameter variable">-prefix</span><span class="token operator">=</span>/usr/local/ --enable-checking<span class="token operator">=</span>release --enable-languages<span class="token operator">=</span>c,c++ --disable-multilib 
<span class="token comment">#完了之后编译并安装，编译安装需要好几个小时，还请耐心等待！</span>
<span class="token function">make</span> <span class="token parameter variable">-j4</span> 
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),E=n("hr",null,null,-1),O={href:"https://blog.csdn.net/LG_15011399296/article/details/127634103",target:"_blank",rel:"noopener noreferrer"},D=c(`<p>--prefix=/usr/local/ 指定安装路径</p><p>--enable-bootstrap 这里引用网上一些文献对该参数的解释：用第一次编译生成的程序进行第二次编译，然后用再次生成的程序进行第三次编译，并且检查比较第二次和第三次结果的正确性，也就是进行冗余的编译检查工作。 非交叉编译环境下，默认已经将该值设为 enable，可以不用显示指定；交叉编译环境下，需要显示将其值设为 disable。</p><p>--enable-checking=release 以软件发布版的标准来对编译时生成的代码进行一致性检查；设置该选项为 enable并不会改变编译器生成的二进制结果，但是会导致编译的时间增加；该选项仅支持gcc编译器； 总体而言，对于上面这个选项，机器的硬件配置较低，以及不愿等待太久编译时间的童鞋，可以设置为 disable；但是这会增加产生未预期的错误的风险，所以应该慎用。 可以同时设置 --disable-bootstrap 与 --disable-checking，这对编译过程的提速很有帮助。</p><p>--enable-threads=posix 顾名思义，启用posix标准的线程支持 ，要让程序能在符合POSIX规范的linux发布版上正确运行，就应该启用该选项，取决于宿主或目标操作系统的类型，其它可用值有：aix，dec，solaris，win32等，如果你是其它的类UNIX系统，就需要设置相应的值。</p><p>--enable-languages=c,c++ 支持的高级语言类型和运行时库，可以设置的所有语言包括 ada,c,c++,Fortran,java,objc,obj-c++,GO 等语言。这里只开启了c和c++,因为支持的语言越多，就需要安装越多的相应静态与动态库，还有五花八门的依赖库，这会让管理变得困难，体积也会变得庞大。</p><p>--disable-multilib 如果你的操作系统是32位，默认就已经设置为 disable，这意味着gcc仅能生成32位的可执行程序；如果你的操作系统是64位，默认就已经设置为 enable，这意味着用gcc编译其它源文件时可以通过 -m32 选项来决定是否生成32位机器代码。如果在64位系统上，要禁止生成32位代码， 设置 --disable-multilib。</p><p>--enable-gather-detailed-mem-stats 允许收集详细的内存使用信息，如果设置该参数为 enable，则将来编译好的gcc可执行程序，可以通过 -fmem-report 选项来输出编译其它程序时的实时内存使用情况。</p><p>--with-long-double-128 指定 long double 类型为128位（16字节！）；设置为 without，则 long double类型将为64位（8字节），这将与普通的 double 类型一样。 基于 Glib 2.4以上版本编译时，默认已经是128位。</p><hr><h3 id="_3-6-查看是否安装成功" tabindex="-1"><a class="header-anchor" href="#_3-6-查看是否安装成功" aria-hidden="true">#</a> 3.6 查看是否安装成功</h3><p><strong>查看gcc版本：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果显示还是<code>7.3</code>的话，那就需要手动软连接一下gcc版本；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 可以find先查一下xgcc</span>
<span class="token punctuation">[</span>root@e2cdbc5ea620 build<span class="token punctuation">]</span><span class="token comment"># find / -name xgcc</span>
/usr/local/gcc-9.3.0/build/prev-gcc/xgcc
/usr/local/gcc-9.3.0/build/stage1-gcc/xgcc
/usr/local/gcc-9.3.0/build/gcc/xgcc

<span class="token comment"># 可以看到有一个xgcc是在build下的gcc下的，将这个软连接到/bin下就行了</span>
<span class="token function">mv</span> /bin/gcc /bin/gcc.bak 
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/gcc-9.3.0/build/gcc/xgcc /bin/gcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成软连接之后就再次<code>gcc --version</code>、或者<code>gcc -v</code>查看版本就行，这时候就会显示9.3了。</p><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412201048399.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>查看gcc9.3的动态库</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>strings /lib64/libstdc++.so.6 <span class="token operator">|</span> <span class="token function">grep</span> GLIBC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412201048589.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>发现动态库还是7.3的，这时候也需要手动去软连接一下库；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查一下所有libstdc++.so.6的库，看看最新的是哪个</span>
<span class="token punctuation">[</span>root@e2cdbc5ea620 build<span class="token punctuation">]</span><span class="token comment"># find / -name libstdc++.so.6.*</span>
/usr/lib64/libstdc++.so.6.0.24
/usr/local/gcc-9.3.0/build/stage1-aarch64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.28
/usr/local/gcc-9.3.0/build/aarch64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.28
/usr/local/gcc-9.3.0/build/prev-aarch64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.28

<span class="token comment"># 可以看到都在编译的路径下[三选一就行]，也是先备份，在软连接到/lib64下</span>
<span class="token function">mv</span> /lib64/libstdc++.so.6 /lib64/libstdc++.so.6-7.3
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/gcc-9.3.0/build/stage1-aarch64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.28 /lib64/libstdc++.so.6

<span class="token comment"># 软连接完成之后在查一下动态库</span>
strings /lib64/libstdc++.so.6 <span class="token operator">|</span> <span class="token function">grep</span> GLIBC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到有<code>GLIBCXX_3.4.28</code>就算是成功了；</p><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412201048763.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-7-安装成功" tabindex="-1"><a class="header-anchor" href="#_3-7-安装成功" aria-hidden="true">#</a> 3.7 安装成功</h3><h2 id="四、参考文献" tabindex="-1"><a class="header-anchor" href="#四、参考文献" aria-hidden="true">#</a> 四、参考文献</h2>`,25),F=n("thead",null,[n("tr",null,[n("th",null,"参考文章标题"),n("th",null,"参考文章链接🔗")])],-1),P={href:"https://blog.csdn.net/LG_15011399296/article/details/127634103",target:"_blank",rel:"noopener noreferrer"},T={href:"https://blog.csdn.net/LG_15011399296/article/details/127634103",target:"_blank",rel:"noopener noreferrer"},U=n("h2",{id:"五、相关文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、相关文章","aria-hidden":"true"},"#"),e(" 五、相关文章")],-1),A=n("thead",null,[n("tr",null,[n("th",null,"文章标题"),n("th",null,"文章链接🔗")])],-1),H={href:"https://blog.csdn.net/liu_chen_yang/article/details/123735242",target:"_blank",rel:"noopener noreferrer"},J={href:"https://blog.csdn.net/liu_chen_yang/article/details/123735242",target:"_blank",rel:"noopener noreferrer"},K={href:"https://blog.csdn.net/liu_chen_yang/article/details/123711779",target:"_blank",rel:"noopener noreferrer"},M={href:"https://blog.csdn.net/liu_chen_yang/article/details/123711779",target:"_blank",rel:"noopener noreferrer"};function Q(R,W){const a=l("ExternalLinkIcon"),i=l("font");return r(),o("div",null,[n("blockquote",null,[p,n("p",null,[e("  🏅"),n("a",b,[e("CSDN博客专家"),s(a)]),g,e("   🏅"),n("a",h,[e("云计算领域优质创作者"),s(a)]),m,e("   🏅"),n("a",v,[e("华为云开发者社区专家博主"),s(a)]),_,e("   🏅"),n("a",f,[e("阿里云开发者社区专家博主"),s(a)]),k,e(" 💊"),x,n("a",y,[e("运维交流社区"),s(a)]),e(" 欢迎大家的加入！"),z,e(" 🐋 希望大家多多支持，我们一起进步！😄"),w,e(" 🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗")])]),C,G,V,L,n("p",null,[e("麒麟V10 系统默认安装的文件版本地址："),n("a",j,[e("http://update.cs2c.com.cn:8080/NS/V10/"),s(a)])]),N,I,n("blockquote",null,[n("p",null,[e("9.3安装包下载地址："),n("a",q,[e("https://ftp.gnu.org/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.gz"),s(a)]),B,e(" 其他版本安装包下载地址："),n("a",S,[e("http://ftp.gnu.org/gnu/gcc/"),s(a)])])]),X,n("p",null,[n("strong",null,[s(i,{color:"red",size:"4"},{default:d(()=>[e("编译安装需要好几个小时，具体没有测试过，还请耐心等待！")]),_:1})])]),E,n("p",null,[e("附：编译参数说明：【参数说明来源于："),n("a",O,[e("https://blog.csdn.net/LG_15011399296/article/details/127634103"),s(a)]),e("】")]),D,n("table",null,[F,n("tbody",null,[n("tr",null,[n("td",null,[n("a",P,[e("麒麟V10编译安装GCC9.3"),s(a)])]),n("td",null,[n("a",T,[e("https://blog.csdn.net/LG_15011399296/article/details/127634103"),s(a)])])])])]),U,n("table",null,[A,n("tbody",null,[n("tr",null,[n("td",null,[n("a",H,[e("Linux中gcc4.8.5升级到gcc5.4.0用已经编译好的安装包升级（重点是不用编译安装，可以更省时）"),s(a)])]),n("td",null,[n("a",J,[e("https://blog.csdn.net/liu_chen_yang/article/details/123735242"),s(a)])])]),n("tr",null,[n("td",null,[n("a",K,[e("Centos7 gcc4.8.5升级到版本gcc5.4.0"),s(a)])]),n("td",null,[n("a",M,[e("https://blog.csdn.net/liu_chen_yang/article/details/123711779"),s(a)])])])])])])}const $=t(u,[["render",Q],["__file","麒麟V10 arm 编译安装 gcc9.3环境.html.vue"]]);export{$ as default};
