import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as d,d as e,w as t,a as s,b as n,e as l}from"./app-6706a352.js";const p={},r=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),u=s("p",null,"有时候我们想执行某个容器的某条命令，但又不想进入容器内。那该怎么办？",-1),_=s("p",null,"所以就有一种办法，我们直接在容器外执行容器内的命令，来进行一些容器内的操作。",-1),b=s("br",null,null,-1),m=s("br",null,null,-1),h=s("h2",{id:"参考实例",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考实例","aria-hidden":"true"},"#"),n(" 参考实例")],-1),k=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查看容器名</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
<span class="token comment">#例如nginx；-c后面是要执行的容器内的命令</span>
<span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginx /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&#39;cd /packages/detectron &amp;&amp; python tools/train.py&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v=s("code",null,"it",-1),f=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> <span class="token builtin class-name">test</span> /bin/bash <span class="token parameter variable">-c</span> &#39;cd /application/test <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> /application/test/start.sh’
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),g=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查看容器的CONTAINER ID</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> 
	<span class="token assign-left variable">DOCKER_ID</span><span class="token operator">=</span>63f6f4sab243
<span class="token comment">#根据CONTAINER ID来执行容器内的命令</span>
<span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token variable">$DOCKER_ID</span> /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&#39;cd /packages/detectron &amp;&amp; python tools/train.py&#39;</span>
<span class="token comment"># 或</span>
<span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token variable">$DOCKER_ID</span> /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&#39;cd /packages/detectron &amp;&amp; python tools/train.py&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={id:"注意事项",tabindex:"-1"},N=s("a",{class:"header-anchor",href:"#注意事项","aria-hidden":"true"},"#",-1),I=s("code",null,"-it",-1),D=s("br",null,null,-1),y=s("code",null,"-it",-1),C=s("code",null,"-it",-1),T=s("code",null,"-i",-1),E=s("br",null,null,-1),O=s("code",null,"-it",-1),R=s("br",null,null,-1),A=s("figure",null,[s("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161456196.gif",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1);function V(B,K){const a=c("font");return i(),d("div",null,[r,u,_,b,e(a,{color:"red",size:"4"},{default:t(()=>[n("可以根据容器名来执行，也可以根据容器的CONTAINER ID来执行")]),_:1}),m,h,s("ul",null,[s("li",null,[e(a,{color:"teal"},{default:t(()=>[n("根据容器名来执行容器内的命令")]),_:1})])]),k,s("ul",null,[s("li",null,[e(a,{color:"teal"},{default:t(()=>[n("根据容器名来执行容器内命令，不使用`-it`。")]),_:1})])]),s("blockquote",null,[s("p",null,[n("这个不使用"),v,n("，一般用于执行周期性计划任务之类的，容易遇到："),e(a,{color:"red"},{default:t(()=>[n("the input device is not a TTY")]),_:1}),n("报错；")])]),f,s("ul",null,[s("li",null,[e(a,{color:"teal"},{default:t(()=>[n("根据CONTAINER ID来执行容器内的命令")]),_:1})])]),g,s("h2",x,[N,n(),e(a,{color:"red"},{default:t(()=>[n("注意事项：")]),_:1})]),s("blockquote",null,[s("p",null,[I,n(" 有可能造成命令不执行，特别是在程序调用时，确认的确需要的时候再加上-it；"),D,n(" 在执行周期性计划任务的时候就不要加"),y,n("了，把"),C,n("改为"),T,n("即可；"),E,n(" 如果在周期性计划任务中使用的是"),O,n("，会遇到："),e(a,{color:"red"},{default:t(()=>[n("the input device is not a TTY")]),_:1}),n("报错；")])]),R,A])}const z=o(p,[["render",V],["__file","docker如何在容器外执行容器内命令.html.vue"]]);export{z as default};
