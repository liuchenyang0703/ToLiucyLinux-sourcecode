import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as d,a as n,b as e,d as o,w as a,e as t}from"./app-6706a352.js";const u={},h=n("figure",null,[n("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161456021.gif",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),_=n("h2",{id:"问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#问题","aria-hidden":"true"},"#"),e(" 问题")],-1),p=n("br",null,null,-1),g=n("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161456378.png",alt:"",loading:"lazy"},null,-1),b=n("h2",{id:"解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解析","aria-hidden":"true"},"#"),e(" 解析")],-1),m=n("br",null,null,-1),k=t(`<blockquote><p>这里说一下，直接用-u参数指定登录名或者直接docker login在输入用户名密码登录都可以。</p></blockquote><p>例如：↓<br><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161456215.png" alt="" loading="lazy"><br> 画红框的就是你config.json的绝对路径。</p><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h2><p>  原因知道了，解决方法其实很简单。只需要使用docker login登录即可。如果上面的目录中有config.json文件，则会更新，如果没有，则会生成一个新的。接着再使用docker push镜像就ok。下次push镜像的时候，也就不需要登录了。</p><p>登录:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@bogon<span class="token punctuation">]</span><span class="token comment"># docker login</span>
Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, <span class="token function">head</span> over to https://hub.docker.com to create one.
Username: liuchenyang
Password: 
WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>

Login Succeeded
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),f={id:"注意",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#注意","aria-hidden":"true"},"#",-1),y=t(`<p>一定要注意自己上传的时候镜像名称对不对，还有路径对不对，我这边解决这个问题之后还是会报这个错，找了半天才找出来，还有一个问题就是给镜像打包的时候名字有问题，因为我创建了一个liblarby，上传镜像的时候就多了一层目录，所以因为名字不正确（可以查看最上面的第一张图片），才会出现相同的报错，最后，重新push一下，就ok了。（tagname是你的镜像的版本号）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push liuchenyang/mycentos:tagname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161456163.png" alt="" loading="lazy"><br> 最后就可以看到我们的镜像存储库了。<br><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161456033.png" alt="" loading="lazy"><br><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161456470.jpeg" alt="" loading="lazy"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><strong>相关文章：</strong></p>`,5),x={href:"https://blog.csdn.net/liu_chen_yang/article/details/124670946",target:"_blank",rel:"noopener noreferrer"},j=n("br",null,null,-1),D={href:"https://blog.csdn.net/liu_chen_yang/article/details/124688952",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),q={href:"https://blog.csdn.net/liu_chen_yang/article/details/124705622",target:"_blank",rel:"noopener noreferrer"},z=n("br",null,null,-1),I={href:"https://blog.csdn.net/liu_chen_yang/article/details/124623482",target:"_blank",rel:"noopener noreferrer"};function L(N,S){const s=c("font"),r=c("ExternalLinkIcon");return i(),d("div",null,[h,_,n("p",null,[e("使用"),o(s,{color:"red"},{default:a(()=>[e("docker push")]),_:1}),e("推送镜像时，出现"),o(s,{color:"red"},{default:a(()=>[e("denied: requested access to the resource is denied")]),_:1}),e("的报错。"),p,g]),b,n("p",null,[e("  原因和Git push代码一样，为了安全起见，在Docker Hub无法确定操作者的情况下，是无法完成push操作的。在Git中是通过配置文件SSH Keys来记住用户，那么在Docker Hub中也是通过配置文件。"),m,e("   通常在你第一次使用docker login命令登录你的Docker仓库时，会自动在你的机器上生成一个config.json的文件，目录具体位置不定。如果你是"),o(s,{color:"red"},{default:a(()=>[e("root用户")]),_:1}),e("操作，一般在"),o(s,{color:"red"},{default:a(()=>[e("/root/.docker/config.json")]),_:1}),e("目录。如果是"),o(s,{color:"red"},{default:a(()=>[e("普通用户")]),_:1}),e("，那么可能在"),o(s,{color:"red"},{default:a(()=>[e("~/.docker/config.json")]),_:1}),e("目录上。具体还是要看你"),o(s,{color:"red"},{default:a(()=>[e("登录的时候")]),_:1}),e("显示的哪个目录。")]),k,n("h2",f,[v,e(),o(s,{color:"red"},{default:a(()=>[e("注意")]),_:1})]),y,n("blockquote",null,[n("p",null,[e("①、"),n("a",x,[e("Docker发布/上传镜像到dockerhub&&下载/拉取镜像&&删除dockerhub镜像"),o(r)]),j,e(" ②、"),n("a",D,[e("Linux中安装/部署docker-compose"),o(r)]),w,e(" ③、"),n("a",q,[e("Docker搭建harbor私有镜像仓库（命令行模式）"),o(r)]),z,e(" ④、"),n("a",I,[e("Linux中基于Docker搭建harbor私有镜像仓库（超级详细）"),o(r)]),e("🔥🔥")])])])}const B=l(u,[["render",L],["__file","Docker——denied_ requested access to the resource is denied问题以及解决方法.html.vue"]]);export{B as default};
