import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as u,c,a as t,b as n,d as l,w as s,e as o}from"./app-6706a352.js";const i={},_=t("h2",{id:"❀grep-sed-awk命令以及正则表达式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#❀grep-sed-awk命令以及正则表达式","aria-hidden":"true"},"#"),n(" ❀grep sed awk命令以及正则表达式")],-1),p={id:"grep",tabindex:"-1"},b=t("a",{class:"header-anchor",href:"#grep","aria-hidden":"true"},"#",-1),h=o(`<blockquote><p>grep 【选项】 &#39;内容&#39; 文件名</p></blockquote><table><thead><tr><th>grep</th><th>以行为单位过滤</th></tr></thead><tbody><tr><td>-i</td><td>不区分大小写</td></tr><tr><td>-v</td><td>取反</td></tr><tr><td>-w</td><td>以单词为单位进行过滤</td></tr><tr><td>-B</td><td>指定行数，过滤指定内容以及上几行</td></tr><tr><td>-A</td><td>指定行数，过滤指定内容以及下几行</td></tr><tr><td>-C</td><td>指定行数，过滤指定内容以及上下各几行</td></tr><tr><td>-o</td><td>只输出过滤的内容</td></tr><tr><td>-c</td><td>统计过滤的行数</td></tr><tr><td>-n</td><td>显示行号</td></tr><tr><td>-q</td><td>用于if逻辑判断 安静模式，不打印任何标准输出。如果有匹配的内容则立即返回状态值0。</td></tr><tr><td>-E</td><td>使用扩展正则</td></tr></tbody></table><p>grep -q 用法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-q</span> 参数<span class="token punctuation">[</span>索要查找的内容<span class="token punctuation">]</span> 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用法1：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat a.txt            ## 测试数据</span>
d e j
s q u
z c b

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># grep &quot;s&quot; a.txt       ## 直接输出匹配结果</span>
s q u

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $?              ## 输出0表示匹配成功</span>
<span class="token number">0</span>

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># grep -q &quot;s&quot; a.txt    ## -q选项表示静默输出</span>

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># echo $?</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法2：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat a.txt            ## 测试数据</span>
nihao 
nihaooo
hello

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># if  grep -q hello a.txt ; then echo yes;else echo no; fi </span>
<span class="token function">yes</span>

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># if grep -q word a.txt; then echo yes; else echo no; fi</span>
no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),g=o("<p>$ 以...结尾<br> ^ 以...开头<br> . 匹配任意一个字符<br> - 匹配前一个字符或子表达式任意次（例如：grep &quot;g.<em>d&quot; a.txt（过滤a.txt文件中的以g开头以d结尾</em>可以代表有任意多个字符或没有字符））<br> [A-Z] [a-z] [0-9] [A-Za-z0-9]<br> [^a-z] 取反</p><p>扩展正则表达式 egrep =grep -E<br> {n,m} 匹配前一个字符或子表达式n到m次<br> {n, } 匹配前一个字符或子表达式最少n次<br> { ,m} 匹配前一个字符或表达式最少m次<br> {n} 匹配前一个字符或子表达式n次</p><p>+ 匹配前一个字符或子表达式1次以上（*包括0+不包括，至少）<br> ？ 匹配前一个字符或子表达式0次或1次以上<br> | 或 <br> () 分组(例如：(g|f)ood)</p><p>\\ 转义，取消一个字符的特殊含义</p>",4),m={href:"https://blog.csdn.net/liu_chen_yang/article/details/123231302",target:"_blank",rel:"noopener noreferrer"},f=t("blockquote",null,[t("p",null,[n("查找/root这层目录有多少个普通文件？"),t("br"),n(' find ./ -maxdepth 1 -type f ! -name ".*" | wc -l | ll | grep -c "^_"')])],-1),k=t("figure",null,[t("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412191618506.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),v={id:"sed",tabindex:"-1"},w=t("a",{class:"header-anchor",href:"#sed","aria-hidden":"true"},"#",-1),q=t("blockquote",null,[t("p",null,"sed [选项] ‘[操作地址]sed内置操作’ 文件")],-1),x=o("<table><thead><tr><th>sed</th><th>流文件处理工具</th></tr></thead><tbody><tr><td>-n</td><td>只输出处理的行</td></tr><tr><td>-i</td><td>修改文件内容，编辑文件</td></tr><tr><td>-e</td><td>指定多个sed内置操作，现在不常用，多个sed内置操作可以使用分号隔开</td></tr><tr><td>-r</td><td>支持扩展正则表达式</td></tr></tbody></table>",1),N=o("<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>2</td><td>代表处理文件的第2行</td></tr><tr><td>1,5</td><td>代表处理文件的第1到5行</td></tr><tr><td>1;5</td><td>代表处理文件的第1行和第5行</td></tr><tr><td>1~2</td><td>代表指定步长为2，处理的是1,3,5…行</td></tr><tr><td>2,~2</td><td>代表处理文件的第2行开始，到2的倍数行结束。（2,~2=2,4 ;4,~4=4,8行）</td></tr><tr><td>4,$</td><td>代表处理文件第4行到最后一行</td></tr><tr><td>1,+2</td><td>代表处理文件的第1行到第1+2行，也就是1到3行</td></tr></tbody></table>",1),$=t("strong",null,"打印第二行",-1),y=t("strong",null,"(2)",-1),E=t("br",null,null,-1),B=t("strong",null,"打印第二行到第五行(2,3,4,5)",-1),R=t("br",null,null,-1),A=t("strong",null,"打印第二行和第五行(2,5)",-1),I=t("br",null,null,-1),G=t("strong",null,"打印第三行到最后一行(3,4,5,6,7,8,9,10)",-1),F=t("br",null,null,-1),C=t("strong",null,"打印指定步长为2，所以打印的是1、3、5、7......行 (1,3,5,7,9)",-1),S=t("br",null,null,-1),O=t("strong",null,"打印第1行到第1+2行，也就是1到3行(1,2,3)",-1),V=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#sed替换文本中的内容【sed -i &quot;s/需要替换的内容/要替换成的内容/g&quot; 要修改的文件名】</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s/123/999/g&quot;</span> abc.txt

<span class="token comment">#sed替换文本中的内容（变量形式）【sed -i &quot;s/需要替换的内容/变量名/g&quot; 要修改的文件名】</span>
<span class="token comment">#注意：带入变量的时候“sed -i &quot;s/123/999/g&quot; abc.txt”这样写是不合法的，怎么解决呢？可以自定义分隔符就可以了。</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s|123|<span class="token variable">$num</span>|g&quot;</span> abc.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D=o("<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>p</td><td>打印</td></tr><tr><td>a</td><td>在指定行后追加数据</td></tr><tr><td>i</td><td>在指定行前插入行前</td></tr><tr><td>d</td><td>删除指定行</td></tr><tr><td>c</td><td>替换指定整行</td></tr><tr><td>s</td><td>替换指定字符，默认替换每行第一个字符</td></tr><tr><td>g</td><td>通常与s组合使用，替换全部指定字符</td></tr><tr><td>n</td><td>获取下一行</td></tr><tr><td>y</td><td>字符转换，类似于tr命令(正则不能使用)</td></tr><tr><td>r</td><td>将文件读入指定行后</td></tr><tr><td>w</td><td>将指定行另存为文件</td></tr><tr><td>q</td><td>结束sed操作</td></tr><tr><td>N</td><td>不会清空模式空间内的内容，将下一行追加到模式空间，两行数据以换行符</td></tr></tbody></table>",1),L=t("strong",null,"修改文件",-1),T=t("br",null,null,-1),z=t("strong",null,"输出一下但不修改文件",-1),j=t("br",null,null,-1),H=t("strong",null,"删除第三行",-1),M=t("br",null,null,-1),P=t("strong",null,"把a.txt中的所有abc修改成ABC",-1),X=t("br",null,null,-1),Z=t("strong",null,"(2,4,6,8,10)",-1),Y=t("br",null,null,-1),J=t("strong",null,"(1,2,3,4,5,6,7,8,9,10)",-1),K=t("br",null,null,-1),Q=t("strong",null,"把a.txt里面的数据放到b.txt的第三行的后面",-1),U=t("br",null,null,-1),W=t("strong",null,"把a.txt的第三行到第五行放到b.txt里面",-1),tt=t("br",null,null,-1),nt=t("strong",null,"除了第三行其他都打印出来",-1),lt=t("p",null,[n("在sed内置操作前加!，表示除了指定地址外，其余行执行该命令"),t("br"),n(" s替换的两个特殊用法&和\\1")],-1),et=t("br",null,null,-1),st={href:"https://blog.csdn.net/liu_chen_yang/article/details/123231302",target:"_blank",rel:"noopener noreferrer"},ot={href:"http://www.baidu.com/1.mp3",target:"_blank",rel:"noopener noreferrer"},dt=t("em",null,")//(.",-1),at=t("figure",null,[t("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412191618100.png",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),rt={id:"awk",tabindex:"-1"},ut=t("a",{class:"header-anchor",href:"#awk","aria-hidden":"true"},"#",-1),ct=t("blockquote",null,[t("p",null,"awk [选项] ‘BEGIN{command}匹配模式{command}END{command}’ 文件")],-1),it=t("blockquote",null,[t("p",null,[n("执行BEGIN{commands}语句块中的语句；"),t("br"),n(" 从文件或标准输入中读取第1行；"),t("br"),n(" 如果没有匹配模式，则执行{}中的语句；"),t("br"),n(" 若有匹配模式，则检查该整行与匹配模式是否匹配;"),t("br"),n(" 若匹配, 则执行{}中的语句；"),t("br"),n(" 若不匹配则不执行{}中的语句,接着读取下一行；"),t("br"),n(" 重复这个过程, 直到所有行被读取完毕；"),t("br"),n(" 执行END{commands}语句块中的语句。")])],-1),_t=t("blockquote",null,[t("p",null,[n("awk的指令一定要用单引号括起"),t("br"),n(" awk的动作一定要用花括号括起"),t("br"),n(" 匹配模式可以是正则表达式、条件表达式或两种组合"),t("br"),n(" 如果模式是正则表达式要用/做分割符"),t("br"),n(" 多个动作之间用;号分开")])],-1),pt=o("<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>$0</td><td>文件的整行</td></tr><tr><td>$1~$n</td><td>awk处理的列，以FS为分隔符</td></tr><tr><td>NF</td><td>查看一共有多少列</td></tr><tr><td>$NF</td><td>查看文件的最后一列</td></tr><tr><td>NR</td><td>表示处理的行数（一共有多少行） 外：指定输出第几行</td></tr><tr><td>FNR</td><td>表示处理当前文件的行数</td></tr><tr><td>FS</td><td>输入字段的分隔符，默认空格或制表符</td></tr><tr><td>RS</td><td>输入记录的分隔符，默认是换行</td></tr><tr><td>OFS</td><td>输出字段的分隔符，默认空格</td></tr><tr><td>ORS</td><td>输出行的分隔符，默认换行</td></tr><tr><td>FILENAME</td><td>awk处理的文件名</td></tr><tr><td>PATH</td><td>文件路径</td></tr><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>命令行参数数组</td></tr><tr><td>ENVIRON</td><td>获取Linux系统中的环境变量</td></tr></tbody></table>",1),bt=t("strong",null,"输出文件名加个END输出一个文件名，否则文件有多少行就输出多少个文件名",-1),ht=t("br",null,null,-1),gt=t("strong",null,"掉用系统中的环境变量",-1),mt=t("br",null,null,-1),ft=t("strong",null,"查看a.txt第一行,用内置分隔符OFS指定以-分割（1.1.1.1-11）",-1),kt=t("br",null,null,-1),vt=t("strong",null,"查看a.txt第一行,用内置分隔符ORS指定以-在最后面分割（1.1.1.1 11-）",-1),wt=t("br",null,null,-1),qt=t("strong",null,"如果h.txt里面有长度等于2的就输出",-1),xt=t("br",null,null,-1),Nt=t("strong",null,"把abc换成ABC",-1),$t=t("br",null,null,-1),yt=t("strong",null,"把ABC换成abc",-1),Et=o("<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>getline</td><td>获取下一行</td></tr><tr><td>split(&quot;字符串&quot;,&quot;数组名称&quot;,&quot;分隔符&quot;)</td><td>按指定分隔符将字符串切割为数组</td></tr><tr><td>length(&quot;字符串&quot;)</td><td>求字符串长度</td></tr><tr><td>sub(&quot;原字符&quot;,&quot;替换字符&quot;,&quot;字符串&quot;)</td><td>默认替换一次，返回的是替换次数，该字符串内容 发生变化</td></tr><tr><td>gsub</td><td>全局替换</td></tr><tr><td>-F</td><td>指定分隔符</td></tr><tr><td>toupper</td><td>小写换大写</td></tr><tr><td>tolower</td><td>大写换小写</td></tr><tr><td><br></td><td></td></tr></tbody></table>",1),Bt=t("strong",null,"打印一共有多少行",-1),Rt=t("br",null,null,-1),At=t("strong",null,"打印第三行",-1),It=t("br",null,null,-1),Gt=t("strong",null,"打印第三行第二段，以：为分隔符",-1),Ft=t("br",null,null,-1),Ct=t("strong",null,"打印前三行",-1),St=t("br",null,null,-1),Ot=t("strong",null,"打印第三行和第五行",-1),Vt=t("strong",null,"strftime()时间 systime()时间戳",-1),Dt=t("strong",null,"输出年月日时分秒（四 3月 3 09:35:34 CST 2022）",-1),Lt=t("br",null,null,-1),Tt=t("strong",null,"输出年（2022）",-1),zt=t("br",null,null,-1),jt=t("strong",null,"输出年月日（2022-03-03）",-1),Ht=t("br",null,null,-1),Mt=t("strong",null,"输出时分秒（09:36:16）",-1),Pt=t("br",null,null,-1),Xt=t("strong",null,"输出时间戳（1646271406）",-1),Zt=t("strong",null,"小数 （0.33333）",-1),Yt=t("br",null,null,-1),Jt=t("strong",null,"整数（0）",-1),Kt=t("br",null,null,-1),Qt=o("<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>%f</td><td>输出小数</td></tr><tr><td>%d</td><td>输出整数</td></tr><tr><td>%s</td><td>输出字符串</td></tr></tbody></table>",1),Ut=t("br",null,null,-1),Wt=t("br",null,null,-1),tn=t("strong",null,"输出（当前使用率是12%）",-1),nn=t("br",null,null,-1),ln={href:"https://blog.csdn.net/liu_chen_yang/article/details/123231302",target:"_blank",rel:"noopener noreferrer"},en=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;BEGIN{FS=&quot;:&quot;;print &quot;ARGC=&quot;ARGC;for(k in ARGV) {print k&quot;=&quot;ARGV[k]; }}&#39;</span> /etc/passwd

<span class="token function">awk</span> <span class="token string">&#39;BEGIN{print ENVIRON[&quot;PATH&quot;];}&#39;</span> /etc/passwd

<span class="token function">awk</span> <span class="token string">&#39;BEGIN{OFMT=&quot;%.3f&quot;;print 2/3,123.11111111;}&#39;</span> /etc/passwd

<span class="token function">awk</span> <span class="token string">&#39;{tmp=$0;getline;print tmp&quot;=&quot;$0}&#39;</span> test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function sn(on,dn){const e=a("font"),d=a("ExternalLinkIcon");return u(),c("div",null,[_,t("h3",p,[b,n(),l(e,{color:"red"},{default:s(()=>[n("grep")]),_:1})]),t("p",null,[t("strong",null,[l(e,{color:"green"},{default:s(()=>[n("语法：")]),_:1})])]),h,t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("正则表达式：")]),_:1})])]),t("blockquote",null,[l(e,{color:"bluye"},{default:s(()=>[n("基础正则表达式 -->grep可以直接使用")]),_:1})]),g,t("p",null,[n("想要查看更多的正则表达式就去👉"),t("a",m,[n("正则表达式（全）"),l(d)]),n("👈")]),f,k,t("h3",v,[w,n(),l(e,{color:"red"},{default:s(()=>[n("sed")]),_:1})]),t("p",null,[t("strong",null,[l(e,{color:"green"},{default:s(()=>[n("语法：")]),_:1})])]),q,t("p",null,[t("strong",null,[l(e,{color:"orange"},{default:s(()=>[n("常用选项")]),_:1})])]),x,t("p",null,[t("strong",null,[l(e,{color:"orange"},{default:s(()=>[n("操作地址")]),_:1})])]),N,t("p",null,[t("strong",null,[l(e,{color:"bright",magenta:""},{default:s(()=>[n("举例：")]),_:1})])]),t("blockquote",null,[t("p",null,[n("sed -n '2p' a.txt "),l(e,{color:"blue"},{default:s(()=>[$,n(),y]),_:1}),E,n(" sed -n '2,5p' a.txt "),l(e,{color:"blue"},{default:s(()=>[B]),_:1}),R,n(" sed -n '2p;5p' a.txt "),l(e,{color:"blue"},{default:s(()=>[A]),_:1}),I,n(" sed -n '3,$p' a.txt "),l(e,{color:"blue"},{default:s(()=>[G]),_:1}),F,n(" sed -n '1~2p' a.txt "),l(e,{color:"blue"},{default:s(()=>[C]),_:1}),S,n(" sed -n '1,+2p' a.txt "),l(e,{color:"blue"},{default:s(()=>[O]),_:1})])]),V,l(e,{color:"red"},{default:s(()=>[n(' 注意：带入变量的时候“sed -i "s/123/999/g" abc.txt”这样写是不合法的，怎么解决呢？可以自定义分隔符就可以了。')]),_:1}),t("p",null,[t("strong",null,[l(e,{color:"orange"},{default:s(()=>[n("内置操作")]),_:1})])]),D,t("p",null,[t("strong",null,[l(e,{color:"bright",magenta:""},{default:s(()=>[n("举例：")]),_:1})])]),t("blockquote",null,[t("p",null,[n("sed -i '2a abcabc' a.txt "),l(e,{color:"blue"},{default:s(()=>[L]),_:1}),T,n(" sed '2a abcabc' a.txt "),l(e,{color:"blue"},{default:s(()=>[z]),_:1}),j,n(" sed '3d' a.txt "),l(e,{color:"blue"},{default:s(()=>[H]),_:1}),M,n(" sed 's/abc/ABC/g' a.txt "),l(e,{color:"blue"},{default:s(()=>[P]),_:1}),X,n(" sed -n 'n,p' a.txt "),l(e,{color:"blue"},{default:s(()=>[Z]),_:1}),Y,n(" sed -n 'N,p' a.txt "),l(e,{color:"blue"},{default:s(()=>[J]),_:1}),K,n(" sed '3r a.txt' b.txt "),l(e,{color:"blue"},{default:s(()=>[Q]),_:1}),U,n(" sed '3,5w a.txt' b.txt "),l(e,{color:"blue"},{default:s(()=>[W]),_:1}),tt,n(" sed -n '3!p' a.txt "),l(e,{color:"blue"},{default:s(()=>[nt]),_:1})])]),lt,t("p",null,[n("使用正则：/字符或表达式/"),et,n(" 想要查看更多的正则表达式就去👉"),t("a",st,[n("正则表达式（全）"),l(d)]),n("👈")]),t("p",null,[n('echo "'),t("a",ot,[n("http://www.baidu.com/1.mp3"),l(d)]),n(`" | sed -r 's#(.`),dt,n(")/(.*)#\\2#'")]),at,t("h3",rt,[ut,n(),l(e,{color:"red"},{default:s(()=>[n("awk")]),_:1})]),t("p",null,[t("strong",null,[l(e,{color:"green"},{default:s(()=>[n("语法：")]),_:1})])]),ct,t("p",null,[t("strong",null,[l(e,{color:"green"},{default:s(()=>[n("执行流程：")]),_:1})])]),it,t("p",null,[t("strong",null,[l(e,{color:"green"},{default:s(()=>[n("awk格式书写：")]),_:1})])]),_t,t("p",null,[t("strong",null,[l(e,{color:"orange"},{default:s(()=>[n("内置操作")]),_:1})])]),pt,t("p",null,[t("strong",null,[l(e,{color:"bright",magenta:""},{default:s(()=>[n("awk进阶用法（内置）举例：")]),_:1})])]),t("blockquote",null,[t("p",null,[n("awk 'END{print FILENAME}' dName.txt "),l(e,{color:"blue"},{default:s(()=>[bt]),_:1}),ht,n(` awk 'END {print ENVIRON["PATH"]}' dName.txt `),l(e,{color:"blue"},{default:s(()=>[gt]),_:1}),mt,n(` head -1 a.txt | awk 'BEGIN{OFS="-"}{print $1,$2}' `),l(e,{color:"blue"},{default:s(()=>[ft]),_:1}),kt,n(` head -1 a.txt | awk 'BEGIN{ORS="-"}{print $1,$2}' `),l(e,{color:"blue"},{default:s(()=>[vt]),_:1}),wt,n(" awk 'length($0)==2 {print}' h.txt"),l(e,{color:"blue"},{default:s(()=>[qt]),_:1}),xt,n(` echo "abc123abc" | awk '{print toupper($0)}' `),l(e,{color:"blue"},{default:s(()=>[Nt]),_:1}),$t,n(` echo "ABC123ABC" | awk '{print tolower($0)}' `),l(e,{color:"blue"},{default:s(()=>[yt]),_:1})])]),Et,t("p",null,[t("strong",null,[l(e,{color:"bright",magenta:""},{default:s(()=>[n("举例：")]),_:1})])]),t("blockquote",null,[t("p",null,[n(`awk -F ":" 'END {print NR}' /etc/passwd `),l(e,{color:"blue"},{default:s(()=>[Bt]),_:1}),Rt,n(` awk -F ":" 'NR==3{print}' /etc/passwd `),l(e,{color:"blue"},{default:s(()=>[At]),_:1}),It,n(` awk -F ":" 'NR==3 {print $2}'/etc/passwd `),l(e,{color:"blue"},{default:s(()=>[Gt]),_:1}),Ft,n(" awk 'NR<=3 {print }' /etc/passwd "),l(e,{color:"blue"},{default:s(()=>[Ct]),_:1}),St,n(" awk 'NR==3||NR==5 {print }' /etc/passwd "),l(e,{color:"blue"},{default:s(()=>[Ot]),_:1})])]),t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("时间函数：")]),_:1}),l(e,{color:"orange"},{default:s(()=>[Vt]),_:1})])]),t("blockquote",null,[t("p",null,[n("awk 'BEGIN {print strftime()}' "),l(e,{color:"blue"},{default:s(()=>[Dt]),_:1}),Lt,n(` awk 'BEGIN {print strftime("%Y")}'`),l(e,{color:"blue"},{default:s(()=>[Tt]),_:1}),zt,n(` awk 'BEGIN {print strftime("%F")}'`),l(e,{color:"blue"},{default:s(()=>[jt]),_:1}),Ht,n(` awk 'BEGIN {print strftime("%T")}' `),l(e,{color:"blue"},{default:s(()=>[Mt]),_:1}),Pt,n(" awk 'BEGIN {print systime()}' "),l(e,{color:"blue"},{default:s(()=>[Xt]),_:1})])]),t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("awk运算： ")]),_:1})])]),t("blockquote",null,[t("p",null,[n("echo a | awk '{print 1/3}' "),l(e,{color:"blue"},{default:s(()=>[Zt]),_:1}),Yt,n(" echo a | awk 'print int(1/3)' "),l(e,{color:"blue"},{default:s(()=>[Jt]),_:1}),Kt,n(" echo a | awk '{print int (1/3*100)}' "),t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("向小数点后面移两位（33）")]),_:1})])])]),t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("占位符：")]),_:1})])]),Qt,t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("字符串格式化输出：")]),_:1})])]),t("blockquote",null,[t("p",null,[n(`echo a | awk '{printf "使用率为%.2f\\n",(1/3)}' `),t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("输出(使用率为0.33) ")]),_:1})]),Ut,n(` echo a | awk '{printf "使用率为%d\\n",(1/3)}' `),t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("输出(使用率为0) ")]),_:1})]),Wt,n(` echo a | awk '{printf "使用率为%s\\n","xiaoming"}' `),t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("输出(使用率为xiaoming) ")]),_:1})])])]),t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("查看内存占用率：")]),_:1})])]),t("blockquote",null,[t("p",null,[n(`free -m | awk 'NR==2 {printf "当前使用率是%d%\\n",int($3/$2*100)"%"}' `),l(e,{color:"blue"},{default:s(()=>[tn]),_:1})])]),t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("awk之if判断：")]),_:1})])]),t("blockquote",null,[t("p",null,[n(`awk '{if ($1=="识别完成") {print 1} else {print 0}}'`),nn,t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("如果$1的值等于识别完成这四个字，就输出1，否则输出0；")]),_:1})])])]),t("p",null,[t("strong",null,[l(e,{color:"red"},{default:s(()=>[n("awk扩展正则：")]),_:1})])]),t("blockquote",null,[t("p",null,[n("awk '$3~/^41/ {print $1,$2,$3}' b.txt "),t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("取第三行以41开头的输出姓，名，编号 ")]),_:1})])]),t("p",null,[n("awk '$2~/^(D|X)/ {print $1,$2}' b.txt "),t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("取第二行以D或者X开头的名输出姓，名 ")]),_:1})])]),t("p",null,[n("awk '/^[^#]/ {print $3}' /etc/fstab "),t("strong",null,[l(e,{color:"blue"},{default:s(()=>[n("取消以#号开头的行打印输出第三行 ")]),_:1})])])]),t("p",null,[n("想要查看更多的正则表达式就去👉"),t("a",ln,[n("正则表达式（全）"),l(d)]),n("👈")]),en])}const un=r(i,[["render",sn],["__file","Linux三剑客grep、sed、awk的使用、介绍及正则表达式使用、介绍.html.vue"]]);export{un as default};
