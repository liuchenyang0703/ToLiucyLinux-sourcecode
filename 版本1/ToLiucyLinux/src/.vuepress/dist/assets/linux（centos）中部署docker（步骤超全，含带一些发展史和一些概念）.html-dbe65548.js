import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as l,a as t,d as e,w as a,b as n,e as s}from"./app-6706a352.js";const p={},u=s('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>  Docker 是一个开源的应用容器引擎，基于Go语言 并遵从 Apache2.0 协议开源。<br>   Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,更重要的是容器性能开销极低。</p><blockquote><p>容器技术发展史:</p><ul><li>容器概念始于 1979年提出的UNIX chroot，它是一个UNIX操作系统的系统调用，将一个进程及其子进程的根目录改变到文件系统中的一个新位置，让这些进程只能访问到这个新的位置，从而达到了进程隔离的目的。<br></li><li>2000年的时候FreeBSD开发了一个类似于chroot的容器技术Jails，这是最早期，也是功能最多的容器技术。Jails 英译过来是监狱的意思，这个“监狱”（用沙盒更为准确）包含了文件系统、用户、网络、进程等的隔离。</li><li>2001年Linux 也发布自己的容器技术Linux VServer，2004 Solaris也发布了Solaris Containers，两者都将资源进行划分，形成一个个zones，又叫做虚拟服务器。</li><li>2005年年推出OpenVZ，它通过对Linux内核进行补丁来提供虚拟化的支持，每个OpenVZ容器完整支持了文件系统、用户及用户组、进程、网络、设备和 IPC 对象的隔离。</li><li>2007 年Google实现了Control Groups( cgroups)，并加入到Linux内核中，这是划时代的，为后期容器的资源配额提供了技术保障。</li><li>2008 年基于cgroups 和 Linux namespace推出了第一个最为完善的 Linux 容器 LXC。</li><li>2013年推出到现在为止最为流行和使用最广泛的容器Docker，相比其他早期的容器技术，Docker 引入了一整套容器管理的生态系统，包括分层的镜像模型，容器注册库，友好的 Rest API。</li><li>2014 年CoreOS 也推出了一个类似于Docker的容器Rocket，CoreOS一个更加轻量级的Linux操作系统，在安全性上比Docker更严格。</li><li>2014年，Kubernetes项目正式发布，容器技术开始和编排系统起头并进。</li><li>2015年，由Google，Redhat、Microsoft及一些大型云厂商共同创立了CNCF，云原生浪潮启动。</li><li>2016年 - 2017年，容器生态开始模块化、规范化。CNCF接受Containerd、rkt项目，OCI发布1.0，CRI/CNI得到广泛支持。</li><li>2017年 - 2018年，容器服务商业化。AWS ECS，Google EKS，Alibaba ACK/ASK/ECI，华为 CCI，Oracle Container Engine for Kubernetes；VMware，Redhat和Rancher开始提供基于Kubernetes的商业服务产品。</li><li>2017 年 - 2019年，容器引擎技术飞速发展，新技术不断涌现。2017 年底Kata Containers社区成立，2018年5月Google开源gVisor代码，2018年11月AWS 开源firecracker，阿里云发布安全沙箱1.0。</li></ul></blockquote><h2 id="docker中两项核心技术" tabindex="-1"><a class="header-anchor" href="#docker中两项核心技术" aria-hidden="true">#</a> Docker中两项核心技术</h2><p>  Docker本质就是宿主机的一个进程，Docker是通过Namespace实现资源隔离，通过Cgroup实现资源限制，通过写时复制技术(copy-on-write)实现了高效的文件操作。</p>',5),k=s("<p>  Linux Namespaces机制提供一种资源隔离方案。PID,IPC,Network等系统资源不再是全局性的，而是属于某个特定的Namespace。每个Namespace下的资源对于其他Namespace下的资源都是透明，不可见的。因此在操作系统层面上看，就会出现多个相同pid的进程。系统中可以同时存在两个进程号为0,1,2的进程，由于属于不同的Namespace，所以它们之间并不冲突。而在用户层面上只能看到属于用户自己Namespace下的资源，例如使用ps命令只能列出自己Namespace下的进程。这样每个Namespace看上去就像一个单独的Linux系统。</p><table><thead><tr><th>Namespace</th><th>隔离内容/内核版本</th></tr></thead><tbody><tr><td>Mount</td><td>挂载点(文件系统) /2.4.19</td></tr><tr><td>UTS</td><td>主机名与域名 /2.6.19</td></tr><tr><td>IPC</td><td>进程间通信的隔离，包括常见的几种进程间通信机制，如信号量，消息队列和共享内存。 /2.6.19</td></tr><tr><td>PID</td><td>进程ID /2.6.24</td></tr><tr><td>Network</td><td>网络设备，端口等 /2.6.29</td></tr><tr><td>User</td><td>用户与用户组 /3.8</td></tr></tbody></table>",2),m=t("p",null,[n("   Cgroup是Control Groups的缩写，是Linux内核提供的一种可以限制、记录、隔离进程组所使用的物理资源（如CPU、内存、磁盘IO等待）的机制，被LXC、docker等很多项目用于实现进程资源控制。Cgroup本身是提供将进程进行分组化管理的功能和接口的基础结构，I/O或内存的分配控制等具体的资源管理是通过该功能来实现的。"),t("br"),n(" 四大功能：")],-1),h=t("ul",null,[t("li",null,"资源限制：可以对任务使用的资源总额进行限制"),t("li",null,"优先级分配：通过分配的cpu时间片数量以及磁盘IO带宽大小，实际上相当于控制了任务运行优先级"),t("li",null,"资源统计：可以统计系统的资源使用量，如cpu时长，内存用量等"),t("li",null,"任务控制：cgroup可以对任务执行挂起、恢复等操作")],-1),b=t("h2",{id:"docker核心概念",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#docker核心概念","aria-hidden":"true"},"#"),n(" Docker核心概念")],-1),v=t("p",null,"   一个带有创建docker容器命令的只读模板，通常在一个基础镜像上添加附加的指令，来创建一个新镜像。",-1),g=t("p",null,"镜像的两个特征：",-1),_=t("blockquote",null,[t("ul",null,[t("li",null,"镜像是分层（Layer）的：即一个镜像可以多个中间层组成，多个镜像可以共享同一中间层，我们也可以通过在镜像添加多一层来生成一个新的镜像。"),t("li",null,"镜像是只读的（read-only）：镜像在构建完成之后，便不可以再修改，而上面我们所说的添加一层构建新的镜像，这中间实际是通过创建一个临时的容器，在容器上增加或删除文件，从而形成新的镜像，因为容器是可以动态改变的。")])],-1),x=t("p",null,"  容器与镜像的关系，就如同面向编程中对象与类之间的关系。",-1),f=t("blockquote",null,[t("p",null,[n("  因为容器是通过镜像来创建的，所以必须先有镜像才能创建容器，而生成的容器是一个独立于宿主机的隔离进程，并且有属于容器自己的网络和命名空间。"),t("br"),n("   镜像由多个中间层（layer）组成，生成的镜像是只读的，但容器却是可读可写的，这是因为容器是在镜像上面添一层读写层（writer/read layer）来实现的。")])],-1),y=s('<blockquote><p>仓库（Repository）是集中存储镜像的地方，仓库分为公有仓库与私有仓库。比如Docker Hub，就是Docker官方提供的一个仓库服务器。</p></blockquote><h2 id="docker的逻辑架构" tabindex="-1"><a class="header-anchor" href="#docker的逻辑架构" aria-hidden="true">#</a> Docker的逻辑架构</h2><blockquote><p>   Docker采用的是C/S架构，Docker客户端向服务端(docker-daemon)发送指令，docker-daemon负责构建，运行以及分发docker容器，docker的客户端与服务端可以运行在同一台主机上，也可以使用docker的客户端连接远程的服务端，客户端与服务端使用RSET API通信，也可以使用Unix套接字，或者是网络接口。另外还可以使用docker compose作为客户端，它可以控制一组docker容器的应用程序。</p></blockquote><h2 id="docker优缺点" tabindex="-1"><a class="header-anchor" href="#docker优缺点" aria-hidden="true">#</a> docker优缺点</h2><p>  优点：</p><blockquote><ol><li>快速部署：短时间内可以部署成百上千个应用，更快速交付到线上。</li><li>高效虚拟化：不需要额外的 hypervisor 支持，直接基于 linux 实现应用虚拟化，相比虚拟机大幅提高性能和效率。</li><li>节省开支：提高服务器利用率，降低 IT 支出。</li><li>简化配置：将运行环境打包保存至容器，使用时直接启动即可。</li><li>快速迁移和扩展： 可夸平台运行在物理机、虚拟机、公有云等环境，良好的兼容性可以方便将应用从A宿主机迁移到B宿主机， 甚至是A平台迁移到B平台。</li></ol></blockquote><p>  缺点：</p><blockquote><p>隔离性：各应用之间的隔离不如虚拟机彻底。</p></blockquote><h2 id="docker-vs-虚拟化" tabindex="-1"><a class="header-anchor" href="#docker-vs-虚拟化" aria-hidden="true">#</a> Docker VS 虚拟化</h2><p>虚拟化：</p><blockquote><p>  传统的虚拟机需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给他的资源将全部被占用。每一个虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。</p></blockquote><p>Docker：</p><blockquote><p>  容器技术是和宿主机共享硬件资源及操作系统可以实现资源的动态分配。<br>   容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。</p></blockquote><table><tr><td bgcolor="yellow">服务器虚拟化解决的核心问题是资源调配，而容器解决的核心问题是应用开发、测试和部署。</td></tr></table><p>docker与虚拟化区别总结:</p><blockquote><ol><li>docker启动快速属于秒级别。虚拟机通常需要几分钟去启动。</li><li>docker需要的资源更少，docker在操作系统级别进行虚拟化，docker容器和内核交互，几乎没有性能损耗，性能优于通过Hypervisor层与内核层的虚拟化。；</li><li>docker更轻量，docker的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境，Docker运行的镜像数远多于虚拟机数量。对系统的利用率非常高</li><li>与虚拟机相比，docker隔离性更弱，docker属于进程之间的隔离，虚拟机可实现系统级别隔离；</li><li>快速创建、删除：虚拟化创建是分钟级别的，Docker容器创建是秒级别的，Docker的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间。</li><li>交付、部署：虚拟机可以通过镜像实现环境交付的一致性，但镜像分发无法体系化；Docker在Dockerfile中记录了容器构建过程，可在集群中实现快速分发和快速部署;</li></ol></blockquote><h2 id="docker部署与管理" tabindex="-1"><a class="header-anchor" href="#docker部署与管理" aria-hidden="true">#</a> docker部署与管理</h2><h3 id="docker安装" tabindex="-1"><a class="header-anchor" href="#docker安装" aria-hidden="true">#</a> docker安装</h3><p>  在服务器上准备在线镜像源，然后添加docker的镜像源，如果之前安装过需要先卸载。</p><h4 id="离线安装" tabindex="-1"><a class="header-anchor" href="#离线安装" aria-hidden="true">#</a> 离线安装</h4>',20),C=t("br",null,null,-1),D={href:"https://download.csdn.net/download/liu_chen_yang/85965917?spm=1001.2014.3001.5503",target:"_blank",rel:"noopener noreferrer"},I=t("br",null,null,-1),q={href:"https://download.csdn.net/download/liu_chen_yang/88647183",target:"_blank",rel:"noopener noreferrer"},E=s(`<p><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161441340.png" alt="" loading="lazy"><br><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161441465.png" alt="" loading="lazy"></p><h4 id="在线安装" tabindex="-1"><a class="header-anchor" href="#在线安装" aria-hidden="true">#</a> 在线安装</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#安装依赖包</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># yum install -y yum-utils device-mapper-persistent-data lvm2	</span>
<span class="token comment">#添加华为云的docker镜像地址</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># yum-config-manager --add-repo https://repo.huaweicloud.com/docker-ce/linux/centos/docker-ce.repo</span>
<span class="token comment"># 更新缓存，只处理新添加的yum源缓存</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># yum makecache fast</span>
<span class="token comment">#安装docker，默认安装最新版本</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># yum -y install docker-ce</span>
<span class="token comment">#查看安装docker版本</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker –version(或者使用docker version)</span>
Docker version <span class="token number">20.10</span>.7, build f0df350

<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># systemctl start docker</span>
<span class="token comment">#查看docker可以安装的版本</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># yum list docker-ce --showduplicates | sort -r</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加镜像加速器" tabindex="-1"><a class="header-anchor" href="#添加镜像加速器" aria-hidden="true">#</a> 添加镜像加速器</h2>`,4),A={href:"https://registry.hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},N=t("br",null,null,-1),S=t("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161441041.png",alt:"",loading:"lazy"},null,-1),T=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /etc/docker</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;</span>

<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token operator">&gt;</span>   <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://mrlmpasq.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;</span> EOF
<span class="token punctuation">{</span>
  <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://mrlmpasq.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker镜像管理" tabindex="-1"><a class="header-anchor" href="#docker镜像管理" aria-hidden="true">#</a> docker镜像管理</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#列出所有的镜像</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE
REPOSITORY：表示镜像的仓库源
TAG：镜像的标签
IMAGE ID：镜像ID
CREATED：镜像创建时间
SIZE：镜像大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>命令</th><th>作用</th><th>举例</th><th>选项</th></tr></thead><tbody><tr><td>docker search</td><td>搜索镜像</td><td>docker search centos</td><td>-f 按条件过滤</td></tr><tr><td>docker pull</td><td>拉取镜像</td><td>docker pull centos:7</td><td></td></tr><tr><td>docker push</td><td>推送镜像到仓库</td><td>docker push centos:7</td><td></td></tr><tr><td>docker tag</td><td>为镜像修改或制作标签</td><td>docker tag centos:7 centos7:v1</td><td></td></tr><tr><td>docker rmi</td><td>删除镜像</td><td>docker rmi centos7:v1</td><td></td></tr><tr><td>docker save</td><td>将镜像保存为tar包</td><td>docker save -o centos7.tar centos:7</td><td>-o 指定生成tar包名称</td></tr><tr><td>docker load</td><td>将tar包保存的镜像导入</td><td>docker load -i centos.tar</td><td>-i 指定读取的tar包名称</td></tr><tr><td>docker histroy</td><td>查看镜像创建的历史</td><td>docker history centos:7</td><td></td></tr></tbody></table><p>docker中还提供了专门管理镜像的子命令docker image,用法与docker命令类似。</p><table><thead><tr><th>docker image 命令</th><th>说明</th></tr></thead><tbody><tr><td>docker images</td><td>列出所有镜像</td></tr><tr><td>docker image ls</td><td>列出所有镜像</td></tr><tr><td>docker image pull</td><td>拉取镜像</td></tr><tr><td>docker image load</td><td>导入镜像</td></tr><tr><td>docker image rm</td><td>删除镜像</td></tr><tr><td>docker image inspect</td><td>查看镜像的详细信息</td></tr><tr><td>docker image histroy</td><td>查看镜像的创建记录</td></tr><tr><td>docker image push</td><td>拉取镜像</td></tr><tr><td>docker image save</td><td>导出镜像</td></tr><tr><td>docker image tag</td><td>设置标签（修改版本）</td></tr><tr><td>docker image prune</td><td>删除未使用的镜像</td></tr><tr><td>docker image build</td><td>dockerfile构建镜像</td></tr></tbody></table><h3 id="docker容器管理" tabindex="-1"><a class="header-anchor" href="#docker容器管理" aria-hidden="true">#</a> docker容器管理</h3><table><thead><tr><th>docker container命令</th><th>说明</th><th>举例</th><th>选项</th></tr></thead><tbody><tr><td>docker ps -a</td><td>查看所有的容器</td><td></td><td></td></tr><tr><td>docekr ps</td><td>查看所有的正在运行的容器</td><td></td><td></td></tr><tr><td>docker container ls</td><td>查看运行的容器</td><td>docker container ls</td><td>-a/-q</td></tr><tr><td>docker container create</td><td>创建容器但不运行</td><td>docker container create nginx</td><td></td></tr><tr><td>docker container start</td><td>启动容器</td><td>docker start nginx</td><td></td></tr><tr><td>docker container stop</td><td>关闭容器</td><td>docker stop nginx</td><td></td></tr><tr><td>docker container restart</td><td>重启容器</td><td>docker restart nginx</td><td></td></tr><tr><td>docker container inspect</td><td>查看容器的信息</td><td>docker inspect nginx</td><td></td></tr><tr><td>docker container rm</td><td>删除容器</td><td>docker rm -f nginx</td><td>-f强制删除</td></tr><tr><td>docker container rename</td><td>给容器重命名</td><td>docker rename nginx nginx2</td><td></td></tr><tr><td>docker container prune</td><td>删除没有运行的容器</td><td></td><td></td></tr><tr><td>docker container pause</td><td>暂停容器运行(挂起)</td><td></td><td></td></tr><tr><td>docker container unpause</td><td>继续运行容器</td><td></td><td></td></tr><tr><td>docker container port</td><td>列出端口映射</td><td>docker port nginx2</td><td></td></tr><tr><td>docker container logs</td><td>获取容器日志信息</td><td>docker logs nginx2</td><td></td></tr><tr><td>docker container kill</td><td>杀死正在运行的容器</td><td>docker kill nginx2</td><td></td></tr><tr><td>docker container stats</td><td>查看容器资源使用情况</td><td>docker stats nginx2</td><td></td></tr><tr><td>docker container top</td><td>查看容器的进程</td><td>docker top nginx2</td><td></td></tr><tr><td>docker container diff</td><td>对比容器文件变化 docker diff nginx nginx2</td><td></td><td></td></tr><tr><td>docker container cp</td><td>容器与主机间文件复制</td><td>docker cp a.txt nginx:/home/</td><td></td></tr><tr><td>docker container exec</td><td>创建容器</td><td>docker exec -itd--name nginx nginx:v1创建容器并运行</td><td></td></tr><tr><td>docker container export</td><td>容器文件导出为tar</td><td>docker export nginx.tar nginx</td><td></td></tr><tr><td>docker container commit</td><td>提交容器变化为新镜像</td><td>docker commit nginx</td><td></td></tr><tr><td>docker container update</td><td>更新容器配置</td><td>docker update --restart=always nginx</td><td></td></tr><tr><td>docker container wait</td><td>阻塞容器</td><td></td><td></td></tr><tr><td>docker container run</td><td>运行一个docker容器</td><td>docker run -itd --name nginx nginx:v1</td><td></td></tr></tbody></table><h3 id="docker运行容器命令" tabindex="-1"><a class="header-anchor" href="#docker运行容器命令" aria-hidden="true">#</a> docker运行容器命令</h3><p>docker container run命令是根据指定镜像创建一个容器并启动运行。如果本地没有该镜像，则从docker仓库中拉去镜像。所以<br> docker container run = docker image pull + docker container create + docker container start<br> 命令格式:docker container run [选项] 镜像名称|镜像ID [command]<br> 常用选项:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>-d</td><td>后台运行容器，返回容器ID，运行守护进程式容器</td></tr><tr><td>-i</td><td>以交互模式运行容器，通常与 -t 同时使用；</td></tr><tr><td>-t</td><td>为容器重新分配一个伪输入终端，通常与 -i 同时使用；</td></tr><tr><td>-P</td><td>随机映射端口，容器内部端口随机映射为主机端口</td></tr><tr><td>-p</td><td>指定端口映射， -p 主机端口:容器端口</td></tr><tr><td>- -expose</td><td>指定暴露端口或端口范围</td></tr><tr><td>- -name</td><td>指定生成容器的名称</td></tr><tr><td>-h</td><td>指定容器的主机名称</td></tr><tr><td>-v</td><td>映射容器外与容器内的目录</td></tr><tr><td>- -net</td><td>指定docker网络模式(bridge/host/none/container)</td></tr><tr><td>- -restart</td><td>指定是否开机自启</td></tr><tr><td>- -privileged</td><td>使用该参数，container内的root拥有真正的root权限。</td></tr><tr><td>- -dns</td><td>指定DNS服务器地址，默认与主机一致</td></tr><tr><td>-e</td><td>设置环境变量</td></tr><tr><td>- -env-file</td><td>从指定文件读取环境变量</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.运行交互式容器 
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker container run -it --name=&#39;centos-1&#39; centos:7 /bin/bash</span>
<span class="token punctuation">[</span>root@3ad7e1a5e55f /<span class="token punctuation">]</span><span class="token comment">#</span>
直接退出，运行exit，容器会结束运行
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker container ls -a</span>
CONTAINER ID   IMAGE      COMMAND       CREATED          STATUS                     PORTS     NAMES
3ad7e1a5e55f   centos:7   <span class="token string">&quot;/bin/bash&quot;</span>   <span class="token number">39</span> seconds ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">6</span> seconds ago             centos-1
可以使用docker container start命令启动容器
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker container start centos-1 </span>
centos-1
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker container ls -a</span>
CONTAINER ID   IMAGE      COMMAND       CREATED              STATUS         PORTS     NAMES
3ad7e1a5e55f   centos:7   <span class="token string">&quot;/bin/bash&quot;</span>   About a minute ago   Up <span class="token number">2</span> seconds             centos-1
运行容器，不结束容器退出
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker container run -it --name=&#39;centos-2&#39; centos:7 /bin/bash</span>
<span class="token punctuation">[</span>root@764b82cb892f /<span class="token punctuation">]</span><span class="token comment">#（ctrl+pq）</span>

<span class="token number">2</span>.启动守护进程式容器
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker container run -d nginx:latest </span>
cef133be2d53c0d4921ceba34855e7dc250984191d10d3dfedf82195e9d85d3c
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS     NAMES
cef133be2d53   nginx:latest   <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   <span class="token number">6</span> seconds ago   Up <span class="token number">5</span> seconds   <span class="token number">80</span>/tcp    relaxed_lichterman
764b82cb892f   centos:7       <span class="token string">&quot;/bin/bash&quot;</span>              <span class="token number">3</span> minutes ago   Up <span class="token number">3</span> minutes             centos-2
3ad7e1a5e55f   centos:7       <span class="token string">&quot;/bin/bash&quot;</span>              <span class="token number">5</span> minutes ago   Up <span class="token number">4</span> minutes             centos-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function O(R,M){const d=r("font"),o=r("ExternalLinkIcon");return i(),l("div",null,[u,t("p",null,[t("strong",null,[e(d,{color:"teal"},{default:a(()=>[n("  1.Namespace")]),_:1})])]),k,t("p",null,[t("strong",null,[e(d,{color:"teal"},{default:a(()=>[n("  2.Cgroup")]),_:1})])]),m,h,b,t("p",null,[t("strong",null,[e(d,{color:"green"},{default:a(()=>[n(" 1. 镜像(Image)")]),_:1})])]),v,g,_,t("p",null,[t("strong",null,[e(d,{color:"green"},{default:a(()=>[n("2. 容器(Container)")]),_:1})])]),x,f,t("p",null,[t("strong",null,[e(d,{color:"green"},{default:a(()=>[n("3. 仓库(Repository)")]),_:1})])]),y,t("p",null,[n("连接中有步骤；"),C,t("a",D,[n("部署docker的离线包"),e(o)]),I,t("a",q,[n("docker24.0.5离线安装包 （一键部署）"),e(o)])]),E,t("p",null,[n("由于docker默认从docker hub("),t("a",A,[n("https://registry.hub.docker.com/"),e(o)]),n(")下载镜像，所以速度非常慢，可以通过阿里云的镜像加速器提高镜像拉取的速度。"),N,S]),T])}const G=c(p,[["render",O],["__file","linux（centos）中部署docker（步骤超全，含带一些发展史和一些概念）.html.vue"]]);export{G as default};
