import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as p,a as n,d as a,w as e,b as s,e as l}from"./app-6706a352.js";const i={},u=n("h2",{id:"一、top-–-实时显示系统运行状态",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、top-–-实时显示系统运行状态","aria-hidden":"true"},"#"),s(" 一、top – 实时显示系统运行状态")],-1),b=n("blockquote",null,[n("p",null,[s("  top命令的功能是用于实时显示系统运行状态，包含处理器、内存、服务、进程等重要资源信息。运维工程师们常常会把top命令比作是“加强版的Windows任务管理器”，因为除了能看到常规的服务进程信息以外，还能够对处理器和内存的负载情况一目了然，实时感知系统全局的运行状态，非常适合作为接手服务器后执行的第一条命令。"),n("br"),n("br"),s("   动态查看进程信息，并且可以查看到系统负载，内存，CPU等使用情况。")])],-1),m=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),h=l("<table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>-d &lt;秒&gt;</td><td>改变显示的更新速度</td></tr><tr><td>-c</td><td>切换显示模式，更详细的显示路径及命令</td></tr><tr><td>-s</td><td>安全模式，不允许交互式指令</td></tr><tr><td>-i</td><td>不显示任何闲置或僵死的行程</td></tr><tr><td>-n</td><td>设定显示的总次数，完成后将会自动退出</td></tr><tr><td>-b</td><td>批处理模式，不进行交互式显示</td></tr><tr><td>-p</td><td>指定某个pid来动态查看</td></tr></tbody></table>",1),v=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>P：以CPU的使用资源排序显示
M：以内存的使用资源排序显示
N：以pid排序显示
T：由进程使用的时间累计排序显示
k：给某一个pid一个信号。可以用来杀死进程
r：给某个pid重新定制一个nice值（即优先级）
q：退出top（用ctrl+c也可以退出top）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g=l(`<p>以默认格式显示系统运行信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># top</span>
<span class="token function">top</span> - 02:48:56 up <span class="token number">20</span> min,  <span class="token number">1</span> user,  load average: <span class="token number">0.00</span>, <span class="token number">0.00</span>, <span class="token number">0.04</span>
Tasks: <span class="token number">432</span> total,   <span class="token number">1</span> running, <span class="token number">431</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie
%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">99.9</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> s
MiB Mem <span class="token builtin class-name">:</span>   <span class="token number">1966.1</span> total,    <span class="token number">172.1</span> free,   <span class="token number">1339.3</span> used,    <span class="token number">454.7</span> buff/cache
MiB Swap:   <span class="token number">2048.0</span> total,   <span class="token number">2033.5</span> free,     <span class="token number">14.5</span> used.    <span class="token number">443.4</span> avail Mem 

   PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                
  <span class="token number">2848</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">177712</span>  <span class="token number">28820</span>   <span class="token number">7700</span> S   <span class="token number">6.2</span>   <span class="token number">1.4</span>   <span class="token number">0</span>:01.31 sssd_kcm                   
     <span class="token number">1</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">244748</span>  <span class="token number">14180</span>   <span class="token number">9052</span> S   <span class="token number">0.0</span>   <span class="token number">0.7</span>   <span class="token number">0</span>:01.10 systemd                    
     <span class="token number">2</span> root      <span class="token number">20</span>   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>   <span class="token number">0.0</span>   <span class="token number">0</span>:00.01 kthreadd  
………………省略部分输出信息………………
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以默认格式显示系统运行信息，但提供完整的进程路径及名称：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># top -c    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以批处理模式显示程序信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># top -b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设定每隔5秒刷新一次信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># top -c -d 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设定总显示次数为3回，随后自动退出命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># top -n 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>top -p: 指定pid 多个pid以‘逗号’分开，只显示指定pid进程的状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># top -c -p 5112,8891</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),k=n("p",null,[s("系统1分钟，5分钟，15分钟平均负载"),n("br"),n("br")],-1),_=n("p",null,[s("us 用户态CPU"),n("br"),s(" sy 内核态CPU"),n("br"),s(" ni 优先级"),n("br"),s(" id 空闲的CPU"),n("br"),s(" wa 等待输入输出设备的CPU"),n("br"),s(" hi 硬中断"),n("br"),s(" si 软中断"),n("br"),s(" st 虚拟化占用CPU资源"),n("br"),n("br")],-1),f=n("p",null,[s("total 总内存空间"),n("br"),s(" free 空闲内存"),n("br"),s(" used 已使用内存"),n("br"),s(" buff 写缓冲 解决空间问题"),n("br"),s(" cache 读缓存 解决速率问题")],-1),x=l('<p>如下图</p><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412181623269.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>进程参数含义</strong></p><table><thead><tr><th>参数</th><th>含义/解析</th></tr></thead><tbody><tr><td>PID</td><td>进程id</td></tr><tr><td>USER</td><td>哪个用户启动的这个进程</td></tr><tr><td>PR</td><td>优先级</td></tr><tr><td>NI</td><td>nice值。负值表示高优先级，正值表示低优先级</td></tr><tr><td>VIRT</td><td>进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</td></tr><tr><td>RES</td><td>此进程占用的内存大小，是总内存*%MEM得出的结果</td></tr><tr><td>SHR</td><td>共享内存大小，单位kb</td></tr><tr><td>S</td><td>进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</td></tr><tr><td>%CPU</td><td>上次更新到现在的CPU时间占用百分比；100%等于1核CPU</td></tr><tr><td>%MEM</td><td>进程使用的物理内存百分比；简单理解，此进程占用了内存总数的百分比。</td></tr><tr><td>TIME+</td><td>进程使用的CPU时间总计，单位1/100秒</td></tr><tr><td>COMMAND</td><td>命令名/命令行；使用top -c会显示全命令</td></tr></tbody></table>',4),y=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span>
<span class="token operator">&amp;&amp;</span> 
<span class="token function">top</span> <span class="token parameter variable">-c</span>
<span class="token operator">&amp;&amp;</span>
<span class="token function">top</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-p</span> pid<span class="token punctuation">(</span>,pid<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、htop-–-互动的进程查看器" tabindex="-1"><a class="header-anchor" href="#二、htop-–-互动的进程查看器" aria-hidden="true">#</a> 二、htop – 互动的进程查看器</h2><blockquote><p>  htop是linux系统中的一个互动的进程查看器，一个文本模式的应用程序(在控制台或者X终端中)，需要ncurses。htop比较人性化。它可让用户交互式操作，支持颜色主题，可横向或纵向滚动浏览进程列表，并支持鼠标操作。<br>   htop相比较top的优势有可以横向或纵向滚动浏览进程列表，以便看到所有的进程和完整的命令行、在启动上比top更快、杀进程时不需要输入进程号、支持鼠标选中操作、top已不再维护。<br>   htop相当于top的升级版，监控界面是彩色的。</p></blockquote>`,3),P=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">htop</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),C=l("<table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>-C</td><td>使用单色配色方案</td></tr><tr><td>-d</td><td>设置更新的延迟， 单位是10微秒</td></tr><tr><td>-s 用户</td><td>纵列排序</td></tr><tr><td>-u 用户</td><td>只显示一个指定用户的进程</td></tr><tr><td>-p 用户</td><td>只显示给用户</td></tr><tr><td>-h</td><td>打印此命令帮助</td></tr><tr><td>-v</td><td>打印版本信息</td></tr></tbody></table>",1),q=l("<table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>space</td><td>标记一个进程</td></tr><tr><td>U</td><td>取消所有标记</td></tr><tr><td>l</td><td>显示进程打来的文件</td></tr><tr><td>u</td><td>显示特定用户</td></tr><tr><td>M</td><td>按照内存排序</td></tr><tr><td>P</td><td>按照CPU排序</td></tr><tr><td>T</td><td>按在线时长排序</td></tr><tr><td>直接输入数字</td><td>查找对应的PID进程</td></tr></tbody></table>",1),U=l(`<p>启动htop：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># htop</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以单色模式启动htop：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># htop -C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置显示更新的延迟为3秒：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># htop -d 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示一个给定的用户的进程：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># htop -u linuxcool_user</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412181623419.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、vmstat-–-显示虚拟内存状态" tabindex="-1"><a class="header-anchor" href="#三、vmstat-–-显示虚拟内存状态" aria-hidden="true">#</a> 三、vmstat – 显示虚拟内存状态</h2><blockquote><p>  vmstat命令的含义为显示虚拟内存状态（“Virtual Memory Statistics”），但是它可以报告关于进程、内存、I/O等系统整体运行状态。</p></blockquote>`,11),I=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vmstat</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
<span class="token operator">&amp;&amp;</span>
<span class="token function">vmstat</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>时间间隔<span class="token punctuation">]</span> <span class="token punctuation">[</span>执行次数<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=l("<table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>-a</td><td>显示活动内页</td></tr><tr><td>-f</td><td>显示启动后创建的进程总数</td></tr><tr><td>-m</td><td>显示slab信息</td></tr><tr><td>-n</td><td>头信息仅显示一次</td></tr><tr><td>-s</td><td>以表格方式显示事件计数器和内存状态</td></tr><tr><td>-d</td><td>报告磁盘状态</td></tr><tr><td>-p</td><td>显示指定的硬盘分区状态</td></tr><tr><td>-S</td><td>输出信息的单位</td></tr></tbody></table>",1),S=l(`<p>显示活动内页：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat -a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示启动后创建的进程总数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat -f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示slab信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat -m</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>头信息仅显示一次：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat -n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以表格方式显示事件计数器和内存状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root  ~<span class="token punctuation">]</span><span class="token comment"># vmstat -s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示指定的硬盘分区状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat -p /dev/sda1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定状态信息刷新的时间间隔为1秒：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定状态信息刷新的时间间隔为2秒刷新3次：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat 2 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16),R=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># vmstat </span>
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   <span class="token function">free</span>   buff  cache   si   so    bi    bo   <span class="token keyword">in</span>   cs us sy <span class="token function">id</span> wa st
 <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">35896</span> <span class="token number">445256</span>    <span class="token number">520</span> <span class="token number">487496</span>  <span class="token number">271</span> <span class="token number">2091</span>   <span class="token number">622</span>  <span class="token number">2119</span>  <span class="token number">129</span>  <span class="token number">127</span>  <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">97</span>  <span class="token number">0</span>  <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=n("br",null,null,-1),O=n("br",null,null,-1),E=n("br",null,null,-1),L=n("br",null,null,-1),B=n("br",null,null,-1),T=n("br",null,null,-1),N=n("br",null,null,-1),V=n("br",null,null,-1),D=n("br",null,null,-1),A=n("br",null,null,-1),z=n("br",null,null,-1),j=n("h2",{id:"四、dstat-–-全能系统信息统计工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、dstat-–-全能系统信息统计工具","aria-hidden":"true"},"#"),s(" 四、dstat – 全能系统信息统计工具")],-1),G=n("blockquote",null,[n("p",null,"  dstat命令是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具，是一个全能系统信息统计工具。与sysstat相比，dstat拥有一个彩色的界面，在手动观察性能状况时，数据比较显眼容易观察；而且dstat支持即时刷新，譬如输入dstat 3即每三秒收集一次，但最新的数据都会每秒刷新显示。和sysstat相同的是，dstat也可以收集指定的性能资源，譬如dstat -c即显示CPU的使用情况。")],-1),H=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> dstat <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),W=l("<table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>-c</td><td>显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息</td></tr><tr><td>-d</td><td>显示磁盘读写数据大小</td></tr><tr><td>-n</td><td>显示网络状态</td></tr><tr><td>-l</td><td>显示系统负载情况</td></tr><tr><td>-m</td><td>显示内存使用情况</td></tr><tr><td>-g</td><td>显示页面使用情况</td></tr><tr><td>-p</td><td>显示进程状态</td></tr><tr><td>-s</td><td>显示交换分区使用情况</td></tr><tr><td>-r</td><td>I/O请求情况</td></tr><tr><td>-y</td><td>系统状态</td></tr><tr><td>--ipc</td><td>显示ipc消息队列，信号等信息</td></tr><tr><td>--socket</td><td>用来显示tcp udp端口状态</td></tr></tbody></table>",1),K=l(`<p>分别显示cpu、disk、net、page、system信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># dstat </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每三秒收集一次 cpu、disk、net、page、system 信息 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># dstat 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># dstat -c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示磁盘读写数据大小 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># dstat -d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示网络状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># dstat -n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五、glances-–-高层次的多子系统概览" tabindex="-1"><a class="header-anchor" href="#五、glances-–-高层次的多子系统概览" aria-hidden="true">#</a> 五、glances – 高层次的多子系统概览</h2><blockquote><p>  Glances是一个相对比较新的系统监控工具，用 Python 编写的，使用 psutil 库从系统获取信息。可以用它来监控 CPU、平均负载、内存、网络接口、磁盘 I/O，文件系统空间利用率、挂载的设备、所有活动进程以及消耗资源最多的进程。Glances 有很多有趣的选项。它的主要特性之一是可以在配置文件中设置阀值（careful小心、warning警告、critical致命），然后它会用不同颜色显示信息以表明系统的瓶颈。</p></blockquote>`,12),X=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>glances <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Z=l("<table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>-b</td><td>显示网络连接速度 Byte/ 秒</td></tr><tr><td>-s</td><td>设置 glances 运行模式为服务器</td></tr><tr><td>-B</td><td>绑定服务器端 IP 地址或者主机名称</td></tr><tr><td>-c</td><td>连接 glances 服务器端</td></tr><tr><td>-t</td><td>设置屏幕刷新的时间间隔，单位为秒，默认值为 2 秒，数值许可范围：1~32767</td></tr></tbody></table>",1),F=l(`<p>192.168.10.2 主机启动 glances 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># glances -s -B 192.168.10.2 &amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从另一台主机查看 192.168.10.2 主机的系统负载状态:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># glances -c 192.168.10.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示网络连接速度 Byte/ 秒：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># glances -b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置屏幕刷新的时间间隔为6秒：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># glances -t 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六、sar-–-系统运行状态统计" tabindex="-1"><a class="header-anchor" href="#六、sar-–-系统运行状态统计" aria-hidden="true">#</a> 六、sar – 系统运行状态统计</h2><blockquote><p>  sar命令是Linux下系统运行状态统计工具，它将指定的操作系统状态计、数器显示到标准输出设备。<br>   sar（System Activity Reporter系统活动情况报告）是目前Linux上最为全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告，包括：文件的读写情况、系统调用的使用情况、磁盘I/O、CPU效率、内存使用状况、进程活动及IPC有关的活动等</p></blockquote>`,10),J=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sar <span class="token punctuation">[</span> 选项 <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>时间间隔<span class="token operator">&gt;</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>次数<span class="token operator">&gt;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Q=l("<table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>-A</td><td>所有报告的总和</td></tr><tr><td>-R</td><td>显示内存状态</td></tr><tr><td>-b</td><td>显示I/O和传递速率的统计信息</td></tr><tr><td>-B</td><td>显示换页状态</td></tr><tr><td>-d</td><td>输出每一块磁盘的使用信息</td></tr><tr><td>-e</td><td>设置显示报告的结束时间</td></tr><tr><td>-f</td><td>从制定的文件读取报告</td></tr><tr><td>-i</td><td>设置状态信息刷新的间隔时间</td></tr><tr><td>-P</td><td>报告每个CPU的状态</td></tr><tr><td>-u</td><td>输出cpu使用情况和统计信息</td></tr><tr><td>-v</td><td>显示索引节点、文件和其他内核表的状态</td></tr><tr><td>-w</td><td>显示交换分区的状态</td></tr><tr><td>-x</td><td>显示给定进程的装</td></tr><tr><td>-r</td><td>报告内存利用率的统计信息</td></tr></tbody></table>",1),Y=l(`<p>使用-R参数显示内存信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># sar -R</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用-b参数显示I/O速率：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># sar -b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用-u参数显示CPU利用率：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># sar -u</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用-d参数查看每块磁盘的使用信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># sar -d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用-i参数和-f参数设置状态信息1秒刷新一次并记录5次</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root ~<span class="token punctuation">]</span><span class="token comment"># sar -i 1 -f 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章" aria-hidden="true">#</a>  相关文章</h2>`,12),$={href:"https://blog.csdn.net/liu_chen_yang/article/details/125143646",target:"_blank",rel:"noopener noreferrer"},nn=n("hr",null,null,-1),sn={href:"https://blog.csdn.net/liu_chen_yang/article/details/125146057",target:"_blank",rel:"noopener noreferrer"},an=n("hr",null,null,-1),tn={href:"https://blog.csdn.net/liu_chen_yang/article/details/125256901?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},en=n("hr",null,null,-1),ln={href:"https://blog.csdn.net/liu_chen_yang/article/details/125146080",target:"_blank",rel:"noopener noreferrer"},dn=n("hr",null,null,-1),on={href:"https://blog.csdn.net/liu_chen_yang/article/details/125146126",target:"_blank",rel:"noopener noreferrer"},rn=n("hr",null,null,-1),cn={href:"https://blog.csdn.net/liu_chen_yang/article/details/125169987",target:"_blank",rel:"noopener noreferrer"},pn=n("hr",null,null,-1);function un(bn,mn){const t=o("font"),d=o("ExternalLinkIcon");return c(),p("div",null,[u,b,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("语法格式")]),_:1})])]),m,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("常用参数")]),_:1})])]),h,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("常用交互参数")]),_:1})])]),v,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("参考实例")]),_:1})])]),g,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("字段解析")]),_:1})])]),n("blockquote",null,[a(t,{color:"red"},{default:e(()=>[s("load average: 0.00, 0.01, 0.05")]),_:1}),k,a(t,{color:"red"},{default:e(()=>[s("%Cpu(s): 0.0 us, 0.0 sy, 0.0 ni,100.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st")]),_:1}),_,a(t,{color:"red"},{default:e(()=>[s("KiB Mem : 995896 total, 487280 free, 121580 used, 387036 buff/cache")]),_:1}),f]),n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("top进程信息")]),_:1})])]),x,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("推荐使用")]),_:1})])]),y,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("语法格式")]),_:1})])]),P,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("常用参数")]),_:1})])]),n("blockquote",null,[a(t,{color:"red"},{default:e(()=>[s("非交互式")]),_:1}),s("是直接输入命令的时候加上参数，而"),a(t,{color:"red"},{default:e(()=>[s("交互式")]),_:1}),s("是htop进入监测后使用的。")]),n("p",null,[s("  "),n("strong",null,[a(t,{color:"orsfdafsdafsdfasfqeqadfsffa"},{default:e(()=>[s("非交互式参数")]),_:1})])]),C,n("p",null,[s("  "),n("strong",null,[a(t,{color:"orsfdafsdafsdfasfqeqadfsffa"},{default:e(()=>[s("交互式参数")]),_:1})])]),q,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("参考实例")]),_:1})])]),U,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("语法格式")]),_:1})])]),I,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("常用参数")]),_:1})])]),M,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("参考实例")]),_:1})])]),S,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("字段解析")]),_:1})])]),R,n("blockquote",null,[n("p",null,[n("strong",null,[a(t,{color:"red"},{default:e(()=>[s("1.procs")]),_:1})])]),a(t,{color:"eoqne"},{default:e(()=>[s("r ")]),_:1}),s(" 表示等待执行的任务数，当一段时间内这个数值一直超过CPU数说明当前系统出现CPU瓶颈；"),a(t,{color:"eoqne"},{default:e(()=>[s("b")]),_:1}),s(" 表示等待IO的进程数量。"),w,O,n("p",null,[n("strong",null,[a(t,{color:"red"},{default:e(()=>[s("2.memory")]),_:1})])]),a(t,{color:"eoqne"},{default:e(()=>[s("swpd ")]),_:1}),s(" 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器；"),a(t,{color:"eoqne"},{default:e(()=>[s("free ")]),_:1}),s(" 空闲的物理内存的大小；"),a(t,{color:"eoqne"},{default:e(()=>[s("buff ")]),_:1}),s(" Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存；"),a(t,{color:"eoqne"},{default:e(()=>[s("cache ")]),_:1}),s(" 直接用来记忆我们打开的文件,给文件做缓冲。"),E,L,n("p",null,[n("strong",null,[a(t,{color:"red"},{default:e(()=>[s("3.swap")]),_:1})])]),a(t,{color:"eoqne"},{default:e(()=>[s("si ")]),_:1}),s(" 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉；"),a(t,{color:"eoqne"},{default:e(()=>[s("so ")]),_:1}),s(" 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。"),B,T,n("p",null,[n("strong",null,[a(t,{color:"red"},{default:e(()=>[s("4.io")]),_:1})])]),a(t,{color:"eoqne"},{default:e(()=>[s("bi ")]),_:1}),s(" 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte;"),a(t,{color:"eoqne"},{default:e(()=>[s("bo ")]),_:1}),s(" 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。"),N,V,n("p",null,[n("strong",null,[a(t,{color:"red"},{default:e(()=>[s("5.system")]),_:1})])]),a(t,{color:"eoqne"},{default:e(()=>[s("in ")]),_:1}),s(" 每秒中断数，包括时钟中断；"),a(t,{color:"eoqne"},{default:e(()=>[s("cs ")]),_:1}),s(" 表示每秒上下文切换;"),n("p",null,[s("这两个值越大，会看到由内核消耗的cpu时间会越多。"),D,A,z,n("strong",null,[a(t,{color:"red"},{default:e(()=>[s("6.cpu")]),_:1})])]),a(t,{color:"eoqne"},{default:e(()=>[s("us ")]),_:1}),s(" 用户CPU时间；"),a(t,{color:"eoqne"},{default:e(()=>[s("sy ")]),_:1}),s(" 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁；"),a(t,{color:"eoqne"},{default:e(()=>[s("id ")]),_:1}),s(" 空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率；"),a(t,{color:"eoqne"},{default:e(()=>[s("wa ")]),_:1}),s(" 等待IO CPU时间；"),a(t,{color:"eoqne"},{default:e(()=>[s("st ")]),_:1}),s(" 等待IO CPU时间。")]),j,G,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("语法格式")]),_:1})])]),H,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("常用参数")]),_:1})])]),W,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("参考实例")]),_:1})])]),K,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("语法格式")]),_:1})])]),X,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("常用参数")]),_:1})])]),Z,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("参考实例")]),_:1})])]),F,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("语法格式")]),_:1})])]),J,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("常用参数")]),_:1})])]),Q,n("p",null,[n("strong",null,[a(t,{color:"teal"},{default:e(()=>[s("参考实例")]),_:1})])]),Y,n("blockquote",null,[n("p",null,[s("💻"),n("a",$,[s("【Linux】之【CPU】相关的命令及解析[lscpu、mpstat]"),a(d)])]),nn,n("p",null,[s("💻"),n("a",sn,[s("【Linux】之【内存】相关的命令&&解析以及内存相关的问题[free、meminfo、内存泄漏、内存溢出、Overcommit]"),a(d)])]),an,n("p",null,[s("💻"),n("a",tn,[s("【Linux】之【磁盘】相关的命令及解析[df、du、iostat、iotop]"),a(d)])]),en,n("p",null,[s("💻"),n("a",ln,[s("【Linux】之【网络】相关的命令及解析[ethtool、nload、nethogs、iftop、iptraf、ifstat]"),a(d)])]),dn,n("p",null,[s("💻"),n("a",on,[s("【Linux】综合性命令及解析【top、htop、vmstat、dstat、glances、sar】"),a(d)])]),rn,n("p",null,[s("💻"),n("a",cn,[s("【Linux】系统如何查看服务器带宽及网络使用情况"),a(d)])]),pn])])}const gn=r(i,[["render",un],["__file","【Linux】综合性命令及解析【top、htop、vmstat、dstat、glances、sar】.html.vue"]]);export{gn as default};
