import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as d,c as p,a as s,b as n,d as a,w as c,e as i}from"./app-6706a352.js";const r={},u=s("figure",null,[s("img",{src:"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/f599934504f440d8872f960b2e7ee0c5.jpeg",alt:"在这里插入图片描述",tabindex:"0",loading:"lazy"}),s("figcaption",null,"在这里插入图片描述")],-1),m=s("p",null,[n("👨‍🎓"),s("strong",null,"博主简介")],-1),b={href:"https://blog.csdn.net/liu_chen_yang?type=blog",target:"_blank",rel:"noopener noreferrer"},v=s("br",null,null,-1),k={href:"https://bbs.huaweicloud.com/community/myblog",target:"_blank",rel:"noopener noreferrer"},h=s("br",null,null,-1),g={href:"https://developer.aliyun.com/my?spm=a2c6h.13148508.setting.3.21fc4f0eCmz1v3#/article?_k=zooqoz",target:"_blank",rel:"noopener noreferrer"},_=s("br",null,null,-1),q=s("strong",null,"交流社区：",-1),f={href:"https://bbs.csdn.net/forums/lcy",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),z=s("br",null,null,-1),K=i(`<hr><h2 id="前言-问题说明" tabindex="-1"><a class="header-anchor" href="#前言-问题说明" aria-hidden="true">#</a> 前言 / 问题说明</h2><blockquote><p>最近在做数据库备份，使用的是脚本的方式备份多个库，手动执行脚本备份是没问题的，然后就使用了周期性计划任务开始定时备份；<br> 但是有一天，我说看一下备份的数据，结果一看，定时任务备份的sql文件压缩包都是4k，解压出来的...sql都是大小都是0，里面更是没有数据都是空的，这是为什么呢？</p></blockquote><h2 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h2><h3 id="_1、首先我们分析手动执行是否成功" tabindex="-1"><a class="header-anchor" href="#_1、首先我们分析手动执行是否成功" aria-hidden="true">#</a> 1、首先我们分析手动执行是否成功</h3><p>首先我们分析手动执行是否成功，使用的脚本，那么我们就去存放脚本的路径下执行一下脚本看看备份的是否有数据；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 先切换到存放脚本的目录下</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/mysql/data/</span>

<span class="token comment"># 执行备份脚本</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># sh back.sh </span>
mysqldump: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>脚本执行完，我们去备份数据库文件的路径下看看大小；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到备份数据库文件的路径下</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># cd backup/data/</span>
<span class="token comment"># 查看大小</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># du -sh *</span>
<span class="token number">4</span>.0K	<span class="token number">20231120</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231121</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231122</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231123</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231124</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231125</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231126</span>.sql.tgz
236K	<span class="token number">20231127</span>.sql.tgz
<span class="token comment"># 最后一个就是刚刚手动执行备份的了；明显和前面的不一样；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们解压下来看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 解压备份的库的压缩包</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># tar xf 20231127.sql.tgz </span>
<span class="token comment"># 查看大小</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># du -sh *</span>
<span class="token number">4</span>.0K	<span class="token number">20231120</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231121</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231122</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231123</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231124</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231125</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231126</span>.sql.tgz
680K	<span class="token number">20231127</span>.sql
236K	<span class="token number">20231127</span>.sql.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到解压下来是<code>680K</code>，我们可以进去看看，是有数据的；<br> 那么就可以排除脚本的本身问题；</p><h3 id="_2、我们分析定时任务中的命令写的是否正确" tabindex="-1"><a class="header-anchor" href="#_2、我们分析定时任务中的命令写的是否正确" aria-hidden="true">#</a> 2、我们分析定时任务中的命令写的是否正确</h3><p>执行定时任务一般里面需要写绝对路径；<br> 我的定时任务是在<code>/etc/crontab</code>下写着，我们来看看;</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/crontab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/54e16ff4d3ed4e82b89f3e92fac17c08.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>可以看到写的是：<code>0 0 */1 * * root /bin/sh /usr/local/mysql/data/back.sh</code>，每天备份一次，而且都写的绝对路径；<br> 我们把他这个绝对路径拿出来试试看看执行一下是否成功？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 定时任务中的脚本执行命令</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># /bin/sh /usr/local/mysql/data/back.sh</span>
mysqldump: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.

<span class="token comment"># 然后去备份数据库的存储路径看看</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/mysql/data/backup/data/</span>

<span class="token comment"># 查看文件大小</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># du -sh *</span>
<span class="token number">4</span>.0K	<span class="token number">20231120</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231121</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231122</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231123</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231124</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231125</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231126</span>.sql.tgz
236K	<span class="token number">20231127</span>.sql.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到是没问题的，如果刚刚备份过怕没有覆盖，可以自己删除，一般备份是会直接覆盖的，而且你解压下来的文件也会默认删除；<br> 也是同样的方法，看着备份的压缩包的大小是没问题的，解压下来看看；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># tar xf 20231127.sql.tgz </span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># du -sh *</span>
<span class="token number">4</span>.0K	<span class="token number">20231120</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231121</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231122</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231123</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231124</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231125</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231126</span>.sql.tgz
680K	<span class="token number">20231127</span>.sql
236K	<span class="token number">20231127</span>.sql.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也是680K，可以vim进入查看一下是否有数据；经过查看是有数据的；<br> 那么也可以排除计划任务的命令是没有问题的；哪是为什么呢？</p><h3 id="_3、检查crontab中的执行环境" tabindex="-1"><a class="header-anchor" href="#_3、检查crontab中的执行环境" aria-hidden="true">#</a> 3、检查crontab中的执行环境</h3><p>既然确定脚本没有问题，并且手动执行能够正确备份数据，那么问题可能出在 crontab 设置或执行环境上。以下是排查的一些步骤：</p>`,23),x={class:"task-list-container"},w={class:"task-list-item"},T=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-0",checked:"checked",disabled:"disabled"},null,-1),A={class:"task-list-item-label",for:"task-item-0"},H=s("strong",null,"检查 crontab 语法",-1),P={class:"task-list-item"},j=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-1",checked:"checked",disabled:"disabled"},null,-1),C={class:"task-list-item-label",for:"task-item-1"},N=s("strong",null,"查看 cron 日志",-1),V=s("code",null,"/var/log/cron",-1),B=s("code",null,"/var/log/syslog",-1),E=s("li",{class:"task-list-item"},[s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-2",checked:"checked",disabled:"disabled"}),s("label",{class:"task-list-item-label",for:"task-item-2"},[n(" 3. "),s("strong",null,"输出重定向"),n("：确保 cron 任务没有把输出（包括错误输出）重定向到 "),s("code",null,"/dev/null"),n(" 或其他看不到的地方。为了更好地调试，可以考虑将输出重定向到一个特定的日志文件。")])],-1),L=i(`<p>例如：<br> 将定时任务改为每分钟执行一次，方便查看，加一个追加日志到执行文件中，并且把错误、非错误信息都存放到这个文件中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>* * * * * root /bin/sh /usr/local/mysql/data/back.sh <span class="token operator">&gt;&gt;</span> /usr/local/mysql/data/backup/logfile.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，就可以查看 <code>logfile.log</code> 来检查是否有任何错误或提示信息。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 4. <strong>环境变量</strong>：cron 执行的环境与登录 shell 的环境可能不同。某些环境变量，如 <code>PATH</code>，可能在 cron 中并未设置，导致你的脚本中的某些命令无法找到。考虑在脚本开头定义重要的环境变量，或者在 crontab 文件中设置它们。</label></li></ul><hr><p>修改完crontab中的定时任务，让他将执行命令的输出 输出到指定文件中，每分钟执行一次，我们等待一分钟，去看一下指定的目录下的文件；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到指定目录</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/mysql/data/backup/</span>
<span class="token comment"># 查看输出的文件内容</span>
<span class="token punctuation">[</span>root@csdn backup<span class="token punctuation">]</span><span class="token comment"># cat logfile.log</span>
/usr/local/mysql/data/back.sh: line <span class="token number">47</span>: mysqldump: <span class="token builtin class-name">command</span> not found
/usr/local/mysql/data/back.sh: line <span class="token number">47</span>: mysqldump: <span class="token builtin class-name">command</span> not found
/usr/local/mysql/data/back.sh: line <span class="token number">47</span>: mysqldump: <span class="token builtin class-name">command</span> not found
/usr/local/mysql/data/back.sh: line <span class="token number">47</span>: mysqldump: <span class="token builtin class-name">command</span> not found
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到都是找不到<code>mysqldump</code>命令，这就是第4种，环境变量的问题了；</p><h3 id="_4、发现问题-周期性计划任务中执行找不到mysqldump命令" tabindex="-1"><a class="header-anchor" href="#_4、发现问题-周期性计划任务中执行找不到mysqldump命令" aria-hidden="true">#</a> 4、发现问题，周期性计划任务中执行找不到mysqldump命令</h3><p>如果在周期性计划任务执行时输出找不到 <code>mysqldump</code> 命令，那么很可能是因为 <code>PATH</code> 环境变量的问题。Cron 任务运行时的环境变量可能与你在终端中运行的环境变量不同，尤其是 <code>PATH</code> 变量。<code>mysqldump</code> 可能不在 cron 的 <code>PATH</code> 中，因此无法找到。</p><ul><li><strong>解决方法：</strong></li></ul><p>①、 <strong>查看mysqldump绝对路径</strong>：可以通过运行 <code>which mysqldump</code> 在终端中找到它的完整路径。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@csdn backup<span class="token punctuation">]</span><span class="token comment"># which mysqldump</span>
/usr/local/mysql/bin/mysqldump
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到是在<code>/usr/local/mysql/bin/mysqldump</code>，那么你可以在脚本中直接使用这个路径来调用它，而不是简单地使用 <code>mysqldump</code>。</p><p>②、 <strong>在脚本中设置 PATH</strong>：在脚本的开头定义 <code>PATH</code> 环境变量，确保它包含 <code>mysqldump</code> 的路径。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 配置添加mysqldump环境变量</span>
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/mysql/bin/:<span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完之后，等待一分钟，查看输出的日志信息；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@csdn backup<span class="token punctuation">]</span><span class="token comment"># tailf logfile.log </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/6ca70cc1110c481db3f14766df7df17e.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>可以看到已经没有报错了；这个是提示，说你使用了明文密码，不影响；</p><p>看着是备份没有什么问题了，我们可以去看备份的数据；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到备份数据的目录</span>
<span class="token punctuation">[</span>root@csdn backup<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/mysql/data/backup/data/</span>
<span class="token comment"># 查看大小</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># du -sh *</span>
<span class="token number">4</span>.0K	<span class="token number">20231120</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231121</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231122</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231123</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231124</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231125</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231126</span>.sql.tgz
236K	<span class="token number">20231127</span>.sql.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到大小也是没问题的，然后我们解压下来看看文件数据；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 解压备份的数据压缩包</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># tar xf 20231127.sql.tgz </span>
<span class="token comment"># 查看大小</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># du -sh *</span>
<span class="token number">4</span>.0K	<span class="token number">20231120</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231121</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231122</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231123</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231124</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231125</span>.sql.tgz
<span class="token number">4</span>.0K	<span class="token number">20231126</span>.sql.tgz
308K	<span class="token number">20231127</span>.sql
236K	<span class="token number">20231127</span>.sql.tgz

<span class="token comment"># 查看数据</span>
<span class="token punctuation">[</span>root@csdn data<span class="token punctuation">]</span><span class="token comment"># vim 20231127.sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>都是有数据的，那么问题就解决了；<br> 周期性计划任务中的输出日志，如果想删除就可以删除，不想删除也不影响，但是会占空间，也不大。</p><h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决" aria-hidden="true">#</a> 问题解决</h2>`,27),I={href:"https://download.csdn.net/download/liu_chen_yang/87776124",target:"_blank",rel:"noopener noreferrer"};function M(U,W){const e=t("ExternalLinkIcon"),l=t("font");return d(),p("div",null,[u,s("blockquote",null,[m,s("p",null,[n("  🏅"),s("a",b,[n("云计算领域优质创作者"),a(e)]),v,n("   🏅"),s("a",k,[n("华为云开发者社区专家博主"),a(e)]),h,n("   🏅"),s("a",g,[n("阿里云开发者社区专家博主"),a(e)]),_,n(" 💊"),q,s("a",f,[n("运维交流社区"),a(e)]),n(" 欢迎大家的加入！"),y,n(" 🐋 希望大家多多支持，我们一起进步！😄"),z,n(" 🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗")])]),K,s("ul",x,[s("li",w,[T,s("label",A,[n(" 1. "),H,n("：确保你的 crontab 语法是正确的。一个常见的错误是忘记指定正确的路径或环境变量。"),a(l,{color:"gree"},{default:c(()=>[n("这个是没问题的；")]),_:1})])]),s("li",P,[j,s("label",C,[n(" 2. "),N,n("：很多 Linux 发行版默认并不会为 cron 任务记录日志。但如果你的系统配置了 cron 日志，那么检查 "),V,n(" 或 "),B,n(" 中的相关条目可能会提供有用的信息。"),a(l,{color:"gree"},{default:c(()=>[n("这个也是没问题的。")]),_:1})])]),E]),L,s("blockquote",null,[s("p",null,[n("推荐一个mysql定时备份的脚本："),s("a",I,[n("mysql数据库定时备份脚本+定时删除 "),a(e)])])])])}const D=o(r,[["render",M],["__file","Mysql使用周期性计划任务定时备份，发现备份的文件都是空的？为什么？如何解决？.html.vue"]]);export{D as default};
