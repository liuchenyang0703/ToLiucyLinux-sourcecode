import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as i,c,a as n,b as s,d as a,w as r,e as p}from"./app-6706a352.js";const u={},d=n("p",null,[s("👨‍🎓"),n("strong",null,"博主简介")],-1),k={href:"https://blog.csdn.net/liu_chen_yang?type=blog",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),m={href:"https://bbs.huaweicloud.com/community/myblog",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),h={href:"https://developer.aliyun.com/my?spm=a2c6h.13148508.setting.3.21fc4f0eCmz1v3#/article?_k=zooqoz",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),y=n("strong",null,"交流社区：",-1),f={href:"https://bbs.csdn.net/forums/lcy",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),q=n("br",null,null,-1),_=p(`<hr><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161323335.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>这里写代码的工具为：PyCharm 2022.3.3<br> Python 版本为：3.8.5<br> 工作平台：Windows</p></blockquote><h2 id="回顾上节" tabindex="-1"><a class="header-anchor" href="#回顾上节" aria-hidden="true">#</a> 回顾上节</h2><blockquote><p>  上一节，我们介绍了Python的基础语法，包括：print()输出、代码缩进、代码行、注释、多行注释、空字符串、形符等。<br> 还有Python的变量。Python是一种动态类型的编程语言，这意味着当你创建一个变量时，不需要提前声明它的数据类型。Python会自动处理这种情况，并在需要时进行类型转换。<br> Python的数据类型包括：数字、整数、布尔值、浮点数、复数、字符串。</p></blockquote><h2 id="一、流程控制图解" tabindex="-1"><a class="header-anchor" href="#一、流程控制图解" aria-hidden="true">#</a> 一、流程控制图解</h2><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161323932.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>流程控制操作</th><th>说明</th></tr></thead><tbody><tr><td>if 判断语句</td><td>根据条件处理数据，支持多个条件分支</td></tr><tr><td>for 循环</td><td>对多个元素的数据进行循环处理，直到所有的数据处理完毕</td></tr><tr><td>while 循环</td><td>在一定条件下循环处理数据，不满足则退出，满足则无限死循环</td></tr><tr><td>break 语句</td><td>退出循环</td></tr><tr><td>continue 语句</td><td>跳过此循环进入下次循环</td></tr><tr><td>pass 语句</td><td>不做任何事，相当于占位符</td></tr><tr><td>with 语句</td><td>管理上下文资源，用于处理文件操作、数据库连接、网络连接、锁对象等需要在使用后明确释放的资源</td></tr><tr><td>raise 语句</td><td>用于引发异常的关键字，它允许你在代码中明确地引发异常，以便在特定条件下触发异常处理过程</td></tr><tr><td>try 异常处理</td><td>用于异常处理的关键字，它用于定义一段可能引发异常的代码块，然后使用 except 子句来捕获并处理这些异常</td></tr></tbody></table><h2 id="二、if-条件判断" tabindex="-1"><a class="header-anchor" href="#二、if-条件判断" aria-hidden="true">#</a> 二、if 条件判断</h2><p>大家都知道在学习编程中，不管哪门语言都会有：判断、循环语句；而判断语句呢就是我们所有语言中通用的<code>if</code> 判断。</p><h3 id="if-语句的语法结构" tabindex="-1"><a class="header-anchor" href="#if-语句的语法结构" aria-hidden="true">#</a> if 语句的语法结构</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 单条件判断：只判断有</span>
<span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">&gt;</span><span class="token punctuation">:</span>
	执行内容

<span class="token comment"># 单条件判断：判断true是什么样的，false是什么样的</span>
<span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
	执行内容
<span class="token keyword">else</span><span class="token punctuation">:</span>
	执行内容<span class="token number">2</span>

<span class="token comment"># 多条件判断：只要满足其中一条即可</span>
<span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
	执行内容
<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
	执行内容
<span class="token keyword">else</span><span class="token punctuation">:</span>
	执行内容 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多条件判断的执行逻辑为：<br><code>如果&lt;条件1&gt;为真，那么就输出&lt;条件1&gt;的执行内容，然后退出判断；</code><br><code>如果&lt;条件1&gt;为假，&lt;条件2&gt;为真，那么就输出&lt;条件2&gt;的执行内容，然后退出判断；</code><br><code>如果&lt;条件1&gt;和&lt;条件2&gt;都为假，那么就执行else。</code></p><h3 id="if-判断示例" tabindex="-1"><a class="header-anchor" href="#if-判断示例" aria-hidden="true">#</a> if 判断示例：</h3><ul><li>当只有一个条件时</li></ul><p>当然这个基本不会使用到</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;正确&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果就为：正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>if - else 判断一个输出的值是否大于50，如果大于50，就输出大于50，如果小于50，就输出，没有机会了；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> num <span class="token operator">&gt;=</span> <span class="token number">50</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数字是大于50的&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数字是小于50的，没有机会了&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161323514.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>if - elif - else 多重判断判断一个年龄；大于等于0岁，小于6岁，输出：“还是一个未成年的小朋友！”；大于等于6岁，小于18岁，输出：“还是一个未成年人哦！！”；大于等于18岁，输出：“已经成年了！！！”；其他输出：&quot;请输入正确的年龄“；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span>  age <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> age <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;还是一个未成年的小朋友！&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">&gt;=</span><span class="token number">6</span> <span class="token keyword">and</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;还是一个未成年人哦！！&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;已经成年了！！！&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入正确的年龄&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>if - elif - elif - else 多重判断，判断成绩：低于60分的为不及格，大于等于60分小于80分为及格，大于等于80分小于90为优秀，大于的呢关于90分小于100分特优，不为数字的默认就会抛出异常，如果大于100或者小于0的都将输出:请输入正确的数字；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的成绩：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">and</span> num <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩不合格！当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">and</span> num <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩合格！当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token keyword">and</span> num <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩已经很优秀啦！ 当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token keyword">and</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩为特有！！！当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token keyword">or</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入正确的成绩，您当前输入的数为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入正确的数字，您当然输入的结果为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>嵌套 if 判断，还是使用上面的成绩，在成绩为100时添加一个：”您的成绩是100分啊，太优秀了。“</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的成绩：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">and</span> num <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩不合格！当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">and</span> num <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩合格！当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token keyword">and</span> num <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩已经很优秀啦！ 当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token keyword">and</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成绩为特有！！！当前成绩为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;您的成绩是100分啊，太优秀了。&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> num <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token keyword">or</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入正确的成绩，您当前输入的数为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入正确的数字，您当然输入的结果为：%s&quot;</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161323937.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>如果表达式比较长，可以使用圆括号括起来：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token operator">=</span><span class="token number">10</span>
b<span class="token operator">=</span><span class="token number">4</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">10</span> <span class="token keyword">or</span> b<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token keyword">or</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果为：1</span>
如果 a<span class="token operator">&gt;</span><span class="token number">10</span> 不成立
或者 b<span class="token operator">&lt;</span><span class="token number">10</span> 成立
或者 <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">4</span> 不成立
这是<span class="token keyword">or</span>或者，满足其中一条即可；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于一个简单的 if 判断，可以使用一行代码就可以完成：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token operator">=</span><span class="token number">29</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;已经成年了&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>if 判断也可以使用推导式来写：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age<span class="token operator">=</span><span class="token number">90</span>
tui <span class="token operator">=</span> <span class="token string">&quot;成年人&quot;</span> <span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">&quot;未成年&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tui<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-判断总结" tabindex="-1"><a class="header-anchor" href="#if-判断总结" aria-hidden="true">#</a> if 判断总结：</h3><blockquote><p>简单来说就是不管是多重判断还是单个还是两个判断，只要满足优先级（层级）最高的一条，则停止；<br> 就比如我1没满足，2满足了，那么就停止；<br> 1没满足，2没满足，也没有3，那就就是输出else的值，然后停止。</p></blockquote><h2 id="三、for-循环" tabindex="-1"><a class="header-anchor" href="#三、for-循环" aria-hidden="true">#</a> 三、for 循环</h2><ul><li><p>for 循环简单来说就是，我要循环1-5，在for循环时写一个range(5)，就会从中每次取一个值，从0开始，知道循环完，也就是到4。详情请看示例一。</p></li><li><p>一般我们有固定值的时候，也就是上面的我要循环1-5，可以使用range()，它是一个典型的可迭代对象的场景。</p></li><li><p>for循环一般用于遍历可迭代对象（如列表、元组、字符串、字典等）的元素。</p></li><li><p>如果for循环中的变量不会再逻辑代码中，可以使用下划线标识符（_）代替，这是一个比较常见的规范的写法。</p></li></ul><h3 id="for-循环的语法结构" tabindex="-1"><a class="header-anchor" href="#for-循环的语法结构" aria-hidden="true">#</a> for 循环的语法结构</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 可迭代对象<span class="token punctuation">:</span>
    <span class="token comment"># 执行循环体内的代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是关于for循环语法结构的详细说明：</p><ol><li><code>for</code> 是关键字，用于标识一个for循环的开始。</li><li><code>变量</code> 是一个用于迭代的变量名，它会依次代表可迭代对象中的每个元素。你可以自己命名这个变量，通常取一个描述性的名称，以便理解迭代的含义。</li><li><code>in</code> 用于分隔变量和可迭代对象。</li><li><code>可迭代对象</code> 是需要遍历的集合，它可以是列表、元组、字符串、字典等。</li><li>冒号 <code>:</code> 用于标识for循环的开始，后面的缩进代码块称为循环体。循环体中的代码会在每次迭代中执行。</li><li>循环体中的代码会重复执行，直到可迭代对象中的元素都被处理完。</li></ol><h3 id="for-循环示例" tabindex="-1"><a class="header-anchor" href="#for-循环示例" aria-hidden="true">#</a> for 循环示例：</h3><ul><li>示例1：循环输出数字1-5</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;当前是：%s&quot;</span> <span class="token operator">%</span>i<span class="token punctuation">)</span>
<span class="token comment"># 结果为：0-4</span>

<span class="token comment"># 如果不想要0-4，想要1-5，我们可以：</span>
i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;当前是：%s&quot;</span> <span class="token operator">%</span>i<span class="token punctuation">)</span>

<span class="token comment"># 结果就是：1-5了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>问：为什么写一个i += 1就变成了 1-5了呢？<br><br> 答：因为，i=0，默认也是i=0，但是到了i += 1，就是 i = i+1，所以就是，循环第一次的时候：0+1=1，所以从1开始了就。</p></blockquote><ul><li>示例2：for循环输出三遍文字，但我在文中不会用到变量；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;重要的事说三遍，没有用到变量的时候可以使用下划线代替 _&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161323783.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>示例3：如果迭代完还有必须执行的逻辑，可以加一个<code>else：</code>，与for语句平行缩进，和if一样；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;执行结束了！&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 结果为：1 2 3 4 5 执行结束了！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  如果迭代的每个变量都可以拆开，可以在&lt;变量&gt;处定义相同数量的变量，如对于字典可以定义k，v，然后在&lt;逻辑代码&gt;中分别使用k和v代表键和值。</p><ul><li>示例4： 迭代字典（此处超纲，可以先了解）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tom<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&#39;hight&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;188&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> tom<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>

<span class="token comment"># 输出结果为：</span>
name Tom
age <span class="token number">14</span>
hight <span class="token number">188</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例5：迭代列表（此处超纲，可以先了解）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tom<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;higth&#39;</span><span class="token punctuation">,</span><span class="token number">188</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> tom<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>

<span class="token comment"># 输出结果为：</span>
name Tom
age <span class="token number">18</span>
higth <span class="token number">188</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),x=n("code",null,"示例4",-1),P=n("code",null,"示例5",-1),T=n("br",null,null,-1),z=n("code",null,"tom.items()",-1),j=n("code",null,"tom",-1),C=p(`<ul><li>示例6：for循环嵌套if判断，当循环的值等于10的时候就输出</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">-</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        
<span class="token comment"># 所以结果是：10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-循环总结" tabindex="-1"><a class="header-anchor" href="#for-循环总结" aria-hidden="true">#</a> for 循环总结：</h3><blockquote><p>for 循环简单来说就是，我要循环1-5，在for循环时写一个range(5)，就会从中每次取一个值，从0开始，知道循环完，也就是到4。<br> 还有就是，for循环和if判断结合，我在循环1-5的时候，如果是3则跳过或者停止；这个在下面会讲到。</p></blockquote><h2 id="四、while-循环" tabindex="-1"><a class="header-anchor" href="#四、while-循环" aria-hidden="true">#</a> 四、while 循环</h2><p>在Python中，<code>while</code>循环用于在满足某个条件时重复执行一段代码。只要条件为真（True），循环就会继续执行。一旦条件变为假（False），循环就会停止。</p><p>以下是<code>while</code>循环的语法结构：</p><h3 id="while-循环的语法结构" tabindex="-1"><a class="header-anchor" href="#while-循环的语法结构" aria-hidden="true">#</a> while 循环的语法结构</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> condition<span class="token punctuation">:</span>  
    <span class="token comment"># 代码块（要重复执行的代码）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>condition</code>是一个表达式，其结果为真（True）或假（False）。<br> 当<code>condition</code>为真时，循环体中的代码会被执行。每执行完一次循环体，Python会重新评估<code>condition</code>。只要<code>condition</code>保持为真，循环就会继续。</p><h3 id="while-循环示例" tabindex="-1"><a class="header-anchor" href="#while-循环示例" aria-hidden="true">#</a> while 循环示例：</h3><p>下面是一个简单的示例，演示如何使用<code>while</code>循环来打印从1到5的数字：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>count <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    count <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们初始化了一个变量<code>count</code>，并将其设置为1。然后，我们使用<code>while</code>循环检查<code>count</code>是否小于或等于5。如果是，我们就打印出<code>count</code>的值，并将<code>count</code>增加1。这个过程会一直重复，直到<code>count</code>的值超过5，此时<code>while</code>循环的条件变为假，循环停止。</p><blockquote><p>注意：在使用<code>while</code>循环时，务必确保循环有一个明确的退出条件，否则循环可能会无限执行下去，导致程序陷入死循环。所以<code>while</code>也有一个别称叫<code>无限死循环</code>；</p></blockquote><ul><li>使用while写一个数字猜谜游戏</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>number <span class="token operator">=</span> <span class="token number">7</span>
guess <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数字猜谜游戏!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> guess <span class="token operator">!=</span> number<span class="token punctuation">:</span>
    guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你猜的数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> guess <span class="token operator">==</span> number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜，你猜对了！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> guess <span class="token operator">&lt;</span> number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;猜的数字小了...&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> guess <span class="token operator">&gt;</span> number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;猜的数字大了...&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的数值是写死的，我们也可以利用python中自带的内置函数，来让数字变为随机，我们去猜！</p><ul><li>使用内置函数随机生成数字，并猜数字</li></ul><blockquote><p><code>random</code>模块是用来生成随机数的，当然，主要就是用于生成不同类型的随机数，如果想要具体的了解可以去百度自行搜索；</p></blockquote><blockquote><p>以下是<code>random</code>模块中一些常用的函数：</p><ol><li><code>random()</code>：生成一个(0.0, 1.0)之间的浮点数。</li><li><code>randint(a, b)</code>：生成一个(a, b)之间的整数，包括a和b。</li><li><code>randrange(a, b)</code>：生成一个(a, b)之间的整数，包括a但不包括b。</li><li><code>choice(seq)</code>：从序列<code>seq</code>中随机选择一个元素。</li><li><code>shuffle(seq)</code>：将序列<code>seq</code>中的元素随机排序。</li></ol></blockquote><p>注意：<code>random</code>模块生成的伪随机数并不是真正的随机数，而是根据一个种子值生成的。如果需要生成真正的随机数，需要使用专门的硬件设备或其他随机数生成器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
number <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

guess <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数字猜谜游戏!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> guess <span class="token operator">!=</span> number<span class="token punctuation">:</span>
    guess <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你猜的数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> guess <span class="token operator">==</span> number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜，你猜对了！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> guess <span class="token operator">&lt;</span> number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;猜的数字小了...&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> guess <span class="token operator">&gt;</span> number<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;猜的数字大了...&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-循环总结" tabindex="-1"><a class="header-anchor" href="#while-循环总结" aria-hidden="true">#</a> while 循环总结：</h3><blockquote><p>在Python中，<code>while</code>循环用于在满足某个条件时重复执行一段代码。只要条件为真（True），循环就会继续执行。一旦条件变为假（False），循环就会停止。<br><br> 注意：在使用while循环时，务必确保循环有一个明确的退出条件，否则循环可能会无限执行下去，导致程序陷入死循环。所以while也有一个别称叫<code>无限死循环</code>；</p></blockquote><h2 id="五、流程控制语句" tabindex="-1"><a class="header-anchor" href="#五、流程控制语句" aria-hidden="true">#</a> 五、流程控制语句</h2><h3 id="_5-1-break-语句" tabindex="-1"><a class="header-anchor" href="#_5-1-break-语句" aria-hidden="true">#</a> 5.1 break 语句</h3><p><code>break</code>可以实现终止循环。经常出现于 <code>for 循环</code> 、 <code>while</code> 循环所嵌套的代码中，但不会出现于这些循环内部的函数或类定义所嵌套的代码中。<br><code>break</code>会终止最近的外层循环，而<code>continue</code> 语句只结束本次循环，继续执行最近的外层循环的下一轮次。</p><ul><li>示例：循环输出10000个值，到第五个的时候停止循环；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;当前为：%s&quot;</span> <span class="token operator">%</span>i<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token comment"># 输出结果为5，因为是从0开始算，到5的时候停止。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此循环判断中运用了4个知识点：for循环、if判断、break停止、pass占位符（什么都不输出）；</p></blockquote><h3 id="_5-2-continue-语句" tabindex="-1"><a class="header-anchor" href="#_5-2-continue-语句" aria-hidden="true">#</a> 5.2 continue 语句</h3><p><code>continue 语句</code> 是属于跳过语句，可以在执行这条循环之后，再次执行最外层的循环；所以就如上面所说，<code>continue 语句</code> 只结束本次循环，还会继续执行最近的外层循环的下一轮次。</p><ul><li>示例：循环输出5个值，跳过第三个值；</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> a <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    a <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 结果为：1 2 4 5；循环a，到3的时候跳过，继续循环。</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 结果是：1 2 4 5；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-pass-语句" tabindex="-1"><a class="header-anchor" href="#_5-3-pass-语句" aria-hidden="true">#</a> 5.3 pass 语句</h3><p>pass语句：<code>pass</code>是一个空操作语句，用于在语法上需要一个语句，但程序不需要任何操作时。它用于在代码中占位，以便将来添加实现。</p><p>例如，如果你正在定义一个新的函数或类，但还没有为其编写任何代码，你可以使用<code>pass</code>语句作为占位符。这样，你的代码将不会引发缩进错误。</p><ul><li>以下是两个个使用<code>pass</code>语句的例子：（普通if判断+函数）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>a <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">60</span>:
    print<span class="token punctuation">(</span><span class="token string">&quot;不及格&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> a <span class="token operator">&gt;=</span> <span class="token number">60</span> and a <span class="token operator">&lt;=</span> <span class="token number">100</span>:
    print<span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span>
else:
    pass

<span class="token comment"># 结果为及格</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后不想输出其他字符，就可以使用pass来占用，避免报错；虽然if不写else也没什么问题，但是这里是举例；</p><ul><li>函数举例</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>  <span class="token comment"># 这里将来会添加函数的实现</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>  <span class="token comment"># 这里将来会添加类的属性和方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>my_function</code>和<code>MyClass</code>都没有实际的实现，但是使用<code>pass</code>语句可以让代码在没有实现的情况下仍然保持语法正确。这样，你可以在后续的开发过程中逐步添加实现。</p><h2 id="六、异常处理" tabindex="-1"><a class="header-anchor" href="#六、异常处理" aria-hidden="true">#</a> 六、异常处理</h2><blockquote><p>异常是什么？<br> 异常就是再写代码中出现的一些报错信息。</p></blockquote><h3 id="_6-1-try-except-语句" tabindex="-1"><a class="header-anchor" href="#_6-1-try-except-语句" aria-hidden="true">#</a> 6.1 try-except 语句</h3><p>try语句在python中主要是用来处理异常的，是非常好的一种处理方式：</p><ul><li>try的语法结构为：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
	<span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>正常运行的代码
<span class="token keyword">except</span> <span class="token operator">&lt;</span>错误类型<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
	<span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>在异常的时候会执行此处代码
<span class="token keyword">except</span> <span class="token operator">&lt;</span>错误类型<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
	<span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>在异常的时候会执行此处代码
<span class="token keyword">else</span><span class="token punctuation">:</span>
	<span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>如果没有异常发生
<span class="token keyword">finally</span><span class="token punctuation">:</span>
	<span class="token operator">&lt;</span>语句<span class="token operator">&gt;</span>有没有抛出异常都会执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、raise-语句" tabindex="-1"><a class="header-anchor" href="#七、raise-语句" aria-hidden="true">#</a> 七、raise 语句</h2><h2 id="八、with-语句" tabindex="-1"><a class="header-anchor" href="#八、with-语句" aria-hidden="true">#</a> 八、with 语句</h2><h2 id="九、小结" tabindex="-1"><a class="header-anchor" href="#九、小结" aria-hidden="true">#</a> 九、小结</h2><blockquote><p>本节主要讲了：</p></blockquote><hr>`,55),N={href:"https://blog.csdn.net/liu_chen_yang/category_11693372.html?spm=1001.2014.3001.5482",target:"_blank",rel:"noopener noreferrer"},V=n("br",null,null,-1),B=n("br",null,null,-1),E=n("blockquote",null,[n("p",null,"下面为结合本章的知识来提出的一些案例实战，可能会有超纲的内容，可以先大概的看一下，等到学完，我会专门整理一个所有课程案例实战的文章，供大家参考，到时候看所有案例都知道是什么意思了。")],-1);function F(I,L){const e=t("ExternalLinkIcon"),o=t("font");return i(),c("div",null,[n("blockquote",null,[d,n("p",null,[s("  🏅"),n("a",k,[s("云计算领域优质创作者"),a(e)]),v,s("   🏅"),n("a",m,[s("华为云开发者社区专家博主"),a(e)]),b,s("   🏅"),n("a",h,[s("阿里云开发者社区专家博主"),a(e)]),g,s(" 💊"),y,n("a",f,[s("运维交流社区"),a(e)]),s(" 欢迎大家的加入！"),w,s(" 🐋 希望大家多多支持，我们一起进步！😄"),q,s(" 🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗")])]),_,n("p",null,[x,s(" 与 "),P,s(" 相比较，重点在于"),a(o,{color:"red"},{default:r(()=>[s("一个是字典，一个是列表")]),_:1}),s("；"),T,s(" 字典在for循环中需要写成："),z,s("，而列表只需要写 "),j,s(" 即可。")]),C,n("blockquote",null,[n("p",null,[s("讲到这里就完成了第三篇《python中的流程控制语句》，接下来我还会持续输出Python学习文章，大家可以订阅我的专栏："),n("a",N,[s("《python 学习》"),a(e)]),V,s(" 🐋 希望大家多多支持，我们一起进步！😄"),B,s(" 🎉如果文章对你有帮助的话，欢迎 点赞 👍🏻 评论 💬 收藏 ⭐️ 加关注+💗")])]),E])}const W=l(u,[["render",F],["__file","【Python学习第三篇】之Python中的流程控制语句.html.vue"]]);export{W as default};
