import comp from "E:/vscode/项目/ToLiucyLinux/src/.vuepress/.temp/pages/document/Docker/linux（centos）中部署docker（步骤超全，含带一些发展史和一些概念）.html.vue"
const data = JSON.parse("{\"path\":\"/document/Docker/linux%EF%BC%88centos%EF%BC%89%E4%B8%AD%E9%83%A8%E7%BD%B2docker%EF%BC%88%E6%AD%A5%E9%AA%A4%E8%B6%85%E5%85%A8%EF%BC%8C%E5%90%AB%E5%B8%A6%E4%B8%80%E4%BA%9B%E5%8F%91%E5%B1%95%E5%8F%B2%E5%92%8C%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%EF%BC%89.html\",\"title\":\"linux（centos）中部署docker（步骤超全，含带一些发展史和一些概念）\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"linux（centos）中部署docker（步骤超全，含带一些发展史和一些概念）\",\"icon\":\"circle-info\",\"order\":1,\"category\":[\"Linux\",\"Docker\"],\"tag\":[\"Linux\",\"Docker\",\"运维\"],\"pageview\":false,\"date\":\"2024-12-16T00:00:00.000Z\",\"comment\":false,\"breadcrumb\":false,\"description\":\"前言 Docker 是一个开源的应用容器引擎，基于Go语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,更重要的是容器性能开销极低。 容器技术发展史: 容器概念始于 19...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://liuchenyang.top/document/Docker/linux%EF%BC%88centos%EF%BC%89%E4%B8%AD%E9%83%A8%E7%BD%B2docker%EF%BC%88%E6%AD%A5%E9%AA%A4%E8%B6%85%E5%85%A8%EF%BC%8C%E5%90%AB%E5%B8%A6%E4%B8%80%E4%BA%9B%E5%8F%91%E5%B1%95%E5%8F%B2%E5%92%8C%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%EF%BC%89.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"ToLiucyLinux\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"linux（centos）中部署docker（步骤超全，含带一些发展史和一些概念）\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"前言 Docker 是一个开源的应用容器引擎，基于Go语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,更重要的是容器性能开销极低。 容器技术发展史: 容器概念始于 19...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161441340.png\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2025-01-16T09:56:20.000Z\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Linux\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Docker\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"运维\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2024-12-16T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2025-01-16T09:56:20.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"linux（centos）中部署docker（步骤超全，含带一些发展史和一些概念）\\\",\\\"image\\\":[\\\"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161441340.png\\\",\\\"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161441465.png\\\",\\\"https://lcy-blog.oss-cn-beijing.aliyuncs.com/blog/202412161441041.png\\\"],\\\"datePublished\\\":\\\"2024-12-16T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2025-01-16T09:56:20.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"𝑴𝒓.𝑳𝒊𝒖𝒄𝒚\\\",\\\"url\\\":\\\"http://liuchenyang.top\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"前言\",\"slug\":\"前言\",\"link\":\"#前言\",\"children\":[]},{\"level\":2,\"title\":\"Docker中两项核心技术\",\"slug\":\"docker中两项核心技术\",\"link\":\"#docker中两项核心技术\",\"children\":[]},{\"level\":2,\"title\":\"Docker核心概念\",\"slug\":\"docker核心概念\",\"link\":\"#docker核心概念\",\"children\":[]},{\"level\":2,\"title\":\"Docker的逻辑架构\",\"slug\":\"docker的逻辑架构\",\"link\":\"#docker的逻辑架构\",\"children\":[]},{\"level\":2,\"title\":\"docker优缺点\",\"slug\":\"docker优缺点\",\"link\":\"#docker优缺点\",\"children\":[]},{\"level\":2,\"title\":\"Docker VS 虚拟化\",\"slug\":\"docker-vs-虚拟化\",\"link\":\"#docker-vs-虚拟化\",\"children\":[]},{\"level\":2,\"title\":\"docker部署与管理\",\"slug\":\"docker部署与管理\",\"link\":\"#docker部署与管理\",\"children\":[{\"level\":3,\"title\":\"docker安装\",\"slug\":\"docker安装\",\"link\":\"#docker安装\",\"children\":[{\"level\":4,\"title\":\"离线安装\",\"slug\":\"离线安装\",\"link\":\"#离线安装\",\"children\":[]},{\"level\":4,\"title\":\"在线安装\",\"slug\":\"在线安装\",\"link\":\"#在线安装\",\"children\":[]}]}]},{\"level\":2,\"title\":\"添加镜像加速器\",\"slug\":\"添加镜像加速器\",\"link\":\"#添加镜像加速器\",\"children\":[{\"level\":3,\"title\":\"docker镜像管理\",\"slug\":\"docker镜像管理\",\"link\":\"#docker镜像管理\",\"children\":[]},{\"level\":3,\"title\":\"docker容器管理\",\"slug\":\"docker容器管理\",\"link\":\"#docker容器管理\",\"children\":[{\"level\":4,\"title\":\"docker运行容器命令\",\"slug\":\"docker运行容器命令\",\"link\":\"#docker运行容器命令\",\"children\":[]}]},{\"level\":3,\"title\":\"docker网络管理\",\"slug\":\"docker网络管理\",\"link\":\"#docker网络管理\",\"children\":[]}]}],\"git\":{\"createdTime\":1737021380000,\"updatedTime\":1737021380000,\"contributors\":[{\"name\":\"liuchenyang\",\"username\":\"liuchenyang\",\"email\":\"2162059863@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":13.9,\"words\":4169},\"filePathRelative\":\"document/Docker/linux（centos）中部署docker（步骤超全，含带一些发展史和一些概念）.md\",\"localizedDate\":\"2024年12月16日\",\"excerpt\":\"<h2>前言</h2>\\n<p>  Docker 是一个开源的应用容器引擎，基于Go语言 并遵从 Apache2.0 协议开源。<br>\\n  Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,更重要的是容器性能开销极低。</p>\\n<blockquote>\\n<p>容器技术发展史:</p>\\n<ul>\\n<li>容器概念始于 1979年提出的UNIX chroot，它是一个UNIX操作系统的系统调用，将一个进程及其子进程的根目录改变到文件系统中的一个新位置，让这些进程只能访问到这个新的位置，从而达到了进程隔离的目的。<br></li>\\n<li>2000年的时候FreeBSD开发了一个类似于chroot的容器技术Jails，这是最早期，也是功能最多的容器技术。Jails 英译过来是监狱的意思，这个“监狱”（用沙盒更为准确）包含了文件系统、用户、网络、进程等的隔离。</li>\\n<li>2001年Linux 也发布自己的容器技术Linux VServer，2004 Solaris也发布了Solaris Containers，两者都将资源进行划分，形成一个个zones，又叫做虚拟服务器。</li>\\n<li>2005年年推出OpenVZ，它通过对Linux内核进行补丁来提供虚拟化的支持，每个OpenVZ容器完整支持了文件系统、用户及用户组、进程、网络、设备和 IPC 对象的隔离。</li>\\n<li>2007 年Google实现了Control Groups( cgroups)，并加入到Linux内核中，这是划时代的，为后期容器的资源配额提供了技术保障。</li>\\n<li>2008 年基于cgroups 和 Linux namespace推出了第一个最为完善的 Linux 容器 LXC。</li>\\n<li>2013年推出到现在为止最为流行和使用最广泛的容器Docker，相比其他早期的容器技术，Docker 引入了一整套容器管理的生态系统，包括分层的镜像模型，容器注册库，友好的 Rest API。</li>\\n<li>2014 年CoreOS 也推出了一个类似于Docker的容器Rocket，CoreOS一个更加轻量级的Linux操作系统，在安全性上比Docker更严格。</li>\\n<li>2014年，Kubernetes项目正式发布，容器技术开始和编排系统起头并进。</li>\\n<li>2015年，由Google，Redhat、Microsoft及一些大型云厂商共同创立了CNCF，云原生浪潮启动。</li>\\n<li>2016年 - 2017年，容器生态开始模块化、规范化。CNCF接受Containerd、rkt项目，OCI发布1.0，CRI/CNI得到广泛支持。</li>\\n<li>2017年 - 2018年，容器服务商业化。AWS ECS，Google EKS，Alibaba ACK/ASK/ECI，华为 CCI，Oracle Container Engine for Kubernetes；VMware，Redhat和Rancher开始提供基于Kubernetes的商业服务产品。</li>\\n<li>2017 年 - 2019年，容器引擎技术飞速发展，新技术不断涌现。2017 年底Kata Containers社区成立，2018年5月Google开源gVisor代码，2018年11月AWS 开源firecracker，阿里云发布安全沙箱1.0。</li>\\n</ul>\\n</blockquote>\",\"copyright\":\"著作权归 Mr.Liucy 所有，基于 MIT 协议，原文链接：https://liuchenyang.top\",\"autoDesc\":true}")
export { comp, data }
